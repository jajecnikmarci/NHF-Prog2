<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_gtest__lite_8h_source" xml:lang="en-US">
<title>gtest_lite.h</title>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_gtest__lite_8h_source_1l00001"/>00001 <emphasis role="preprocessor">#ifndef&#32;GTEST_LITE_H</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00002"/>00002 <emphasis role="preprocessor">#define&#32;GTEST_LITE_H</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00003"/>00003 
<anchor xml:id="_gtest__lite_8h_source_1l00033"/>00033 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00034"/>00034 <emphasis role="preprocessor">#include&#32;&lt;cassert&gt;</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00035"/>00035 <emphasis role="preprocessor">#include&#32;&lt;cmath&gt;</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00036"/>00036 <emphasis role="preprocessor">#include&#32;&lt;cstring&gt;</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00037"/>00037 <emphasis role="preprocessor">#include&#32;&lt;limits&gt;</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00038"/>00038 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00039"/>00039 <emphasis role="preprocessor">#include&#32;&lt;fstream&gt;</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00040"/>00040 <emphasis role="preprocessor">#ifdef&#32;MEMTRACE</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00041"/>00041 <emphasis role="preprocessor">#include&#32;&quot;memtrace.h&quot;</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00042"/>00042 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00043"/>00043 
<anchor xml:id="_gtest__lite_8h_source_1l00044"/>00044 <emphasis role="comment">//&#32;Két&#32;makró&#32;az&#32;egyes&#32;tesztek&#32;elé&#32;és&#32;mögé:</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00045"/>00045 <emphasis role="comment">//&#32;A&#32;két&#32;makró&#32;a&#32;kapcsos&#32;zárójelekkel&#32;egy&#32;új&#32;blokkot&#32;hoz&#32;létre,&#32;amiben</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00046"/>00046 <emphasis role="comment">//&#32;a&#32;nevek&#32;lokálisak,&#32;így&#32;elkerülhető&#32;a&#32;névütközés.</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00047"/>00047 
<anchor xml:id="_gtest__lite_8h_source_1l00053"/><link linkend="_gtest__lite_8h_1a379a7b57e74521cb2c8e99f0e2779a72">00053</link> <emphasis role="preprocessor">#define&#32;TEST(C,&#32;N)&#32;{&#32;gtest_lite::test.begin(#C&quot;.&quot;</emphasis>#N);
<anchor xml:id="_gtest__lite_8h_source_1l00054"/>00054 
<anchor xml:id="_gtest__lite_8h_source_1l00056"/><link linkend="_gtest__lite_8h_1a29fd18bed01c4d836c7ebfe73a125c3f">00056</link> <emphasis role="preprocessor">#define&#32;END&#32;gtest_lite::test.end();&#32;}</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00057"/>00057 
<anchor xml:id="_gtest__lite_8h_source_1l00060"/><link linkend="_gtest__lite_8h_1acc9065c889d0797062317b30fd8767d4">00060</link> <emphasis role="preprocessor">#define&#32;ENDM&#32;gtest_lite::test.end(true);&#32;}</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00061"/>00061 
<anchor xml:id="_gtest__lite_8h_source_1l00065"/><link linkend="_gtest__lite_8h_1ad2e2f10cb2a494ff7ae23938dfdfc41a">00065</link> <emphasis role="preprocessor">#define&#32;ENDMsg(t)&#32;gtest_lite::test.end(true)&#32;&lt;&lt;&#32;t&#32;&lt;&lt;&#32;std::endl;&#32;}</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00066"/>00066 
<anchor xml:id="_gtest__lite_8h_source_1l00067"/>00067 <emphasis role="comment">//&#32;Eredmények&#32;vizsgálatát&#32;segítő&#32;makrók.</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00068"/>00068 <emphasis role="comment">//&#32;A&#32;paraméterek&#32;és&#32;a&#32;funkciók&#32;a&#32;gtest&#32;keretrendszerrel&#32;megegyeznek.</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00069"/>00069 
<anchor xml:id="_gtest__lite_8h_source_1l00071"/><link linkend="_gtest__lite_8h_1a75adcdf89f69b0b615e395daafc315af">00071</link> <emphasis role="preprocessor">#define&#32;SUCCEED()&#32;gtest_lite::test.expect(true,&#32;__FILE__,&#32;__LINE__,&#32;&quot;SUCCEED()&quot;</emphasis>,&#32;true)
<anchor xml:id="_gtest__lite_8h_source_1l00072"/>00072 
<anchor xml:id="_gtest__lite_8h_source_1l00074"/><link linkend="_gtest__lite_8h_1a3e26a8d27caa386ed0ea7ce9d5b7c4ed">00074</link> <emphasis role="preprocessor">#define&#32;FAIL()&#32;gtest_lite::test.expect(false,&#32;__FILE__,&#32;__LINE__,&#32;&quot;FAIL()&quot;</emphasis>,&#32;true)
<anchor xml:id="_gtest__lite_8h_source_1l00075"/>00075 
<anchor xml:id="_gtest__lite_8h_source_1l00077"/>00077 
<anchor xml:id="_gtest__lite_8h_source_1l00078"/><link linkend="_gtest__lite_8h_1aff8385840165a184edc29446aa51936f">00078</link> <emphasis role="preprocessor">#define&#32;EXPECT_EQ(expected,&#32;actual)&#32;gtest_lite::EXPECT_(expected,&#32;actual,&#32;gtest_lite::eq,&#32;__FILE__,&#32;__LINE__,&#32;&quot;EXPECT_EQ(&quot;</emphasis>&#32;#expected&#32;&quot;,&#32;&quot;&#32;#actual&#32;&quot;)&quot;&#32;)
<anchor xml:id="_gtest__lite_8h_source_1l00079"/>00079 
<anchor xml:id="_gtest__lite_8h_source_1l00081"/><link linkend="_gtest__lite_8h_1adb8a724f2c5c63ead11073c21fd51198">00081</link> <emphasis role="preprocessor">#define&#32;EXPECT_NE(expected,&#32;actual)&#32;gtest_lite::EXPECT_(expected,&#32;actual,&#32;gtest_lite::ne,&#32;__FILE__,&#32;__LINE__,&#32;&quot;EXPECT_NE(&quot;</emphasis>&#32;#expected&#32;&quot;,&#32;&quot;&#32;#actual&#32;&quot;)&quot;,&#32;&quot;etalon&quot;&#32;)
<anchor xml:id="_gtest__lite_8h_source_1l00082"/>00082 
<anchor xml:id="_gtest__lite_8h_source_1l00084"/><link linkend="_gtest__lite_8h_1ac680be4a2404c20cae831740779d11cd">00084</link> <emphasis role="preprocessor">#define&#32;EXPECT_LE(expected,&#32;actual)&#32;gtest_lite::EXPECT_(expected,&#32;actual,&#32;gtest_lite::le,&#32;__FILE__,&#32;__LINE__,&#32;&quot;EXPECT_LE(&quot;</emphasis>&#32;#expected&#32;&quot;,&#32;&quot;&#32;#actual&#32;&quot;)&quot;,&#32;&quot;etalon&quot;&#32;)
<anchor xml:id="_gtest__lite_8h_source_1l00085"/>00085 
<anchor xml:id="_gtest__lite_8h_source_1l00087"/><link linkend="_gtest__lite_8h_1a46603095284e7bcd2f114cfdc7c79b4f">00087</link> <emphasis role="preprocessor">#define&#32;EXPECT_LT(expected,&#32;actual)&#32;gtest_lite::EXPECT_(expected,&#32;actual,&#32;gtest_lite::lt,&#32;__FILE__,&#32;__LINE__,&#32;&quot;EXPECT_LT(&quot;</emphasis>&#32;#expected&#32;&quot;,&#32;&quot;&#32;#actual&#32;&quot;)&quot;,&#32;&quot;etalon&quot;&#32;)
<anchor xml:id="_gtest__lite_8h_source_1l00088"/>00088 
<anchor xml:id="_gtest__lite_8h_source_1l00090"/><link linkend="_gtest__lite_8h_1aad891c6b36689d35ee54de65351ab224">00090</link> <emphasis role="preprocessor">#define&#32;EXPECT_GE(expected,&#32;actual)&#32;gtest_lite::EXPECT_(expected,&#32;actual,&#32;gtest_lite::ge,&#32;__FILE__,&#32;__LINE__,&#32;&quot;EXPECT_GE(&quot;</emphasis>&#32;#expected&#32;&quot;,&#32;&quot;&#32;#actual&#32;&quot;)&quot;,&#32;&quot;etalon&quot;&#32;)
<anchor xml:id="_gtest__lite_8h_source_1l00091"/>00091 
<anchor xml:id="_gtest__lite_8h_source_1l00093"/><link linkend="_gtest__lite_8h_1ac2262f96c4664cf3e170d2edaaba6c44">00093</link> <emphasis role="preprocessor">#define&#32;EXPECT_GT(expected,&#32;actual)&#32;gtest_lite::EXPECT_(expected,&#32;actual,&#32;gtest_lite::gt,&#32;__FILE__,&#32;__LINE__,&#32;&quot;EXPECT_GT(&quot;</emphasis>&#32;#expected&#32;&quot;,&#32;&quot;&#32;#actual&#32;&quot;)&quot;,&#32;&quot;etalon&quot;&#32;)
<anchor xml:id="_gtest__lite_8h_source_1l00094"/>00094 
<anchor xml:id="_gtest__lite_8h_source_1l00096"/><link linkend="_gtest__lite_8h_1ab400890edc9f419e40c28a224e8ed79f">00096</link> <emphasis role="preprocessor">#define&#32;EXPECT_TRUE(actual)&#32;&#32;gtest_lite::EXPECT_(true,&#32;actual,&#32;&#32;gtest_lite::eq,&#32;__FILE__,&#32;__LINE__,&#32;&quot;EXPECT_TRUE(&quot;</emphasis>&#32;#actual&#32;&quot;)&quot;&#32;)
<anchor xml:id="_gtest__lite_8h_source_1l00097"/>00097 
<anchor xml:id="_gtest__lite_8h_source_1l00099"/><link linkend="_gtest__lite_8h_1a58cae60fff88d713c4850b50d3e592a6">00099</link> <emphasis role="preprocessor">#define&#32;EXPECT_FALSE(actual)&#32;gtest_lite::EXPECT_(false,&#32;actual,&#32;gtest_lite::eq,&#32;__FILE__,&#32;__LINE__,&#32;&quot;EXPECT_FALSE(&quot;</emphasis>&#32;#actual&#32;&quot;)&quot;&#32;)
<anchor xml:id="_gtest__lite_8h_source_1l00100"/>00100 
<anchor xml:id="_gtest__lite_8h_source_1l00102"/><link linkend="_gtest__lite_8h_1a5ce7d58df8cb696aa05e77c2370de7a8">00102</link> <emphasis role="preprocessor">#define&#32;EXPECT_FLOAT_EQ(expected,&#32;actual)&#32;&#32;gtest_lite::EXPECT_(expected,&#32;actual,&#32;gtest_lite::almostEQ,&#32;__FILE__,&#32;__LINE__,&#32;&quot;EXPECT_FLOAT_EQ(&quot;</emphasis>&#32;#expected&#32;&quot;,&#32;&quot;&#32;#actual&#32;&quot;)&quot;&#32;)
<anchor xml:id="_gtest__lite_8h_source_1l00103"/>00103 
<anchor xml:id="_gtest__lite_8h_source_1l00105"/><link linkend="_gtest__lite_8h_1a6e6277442d96cd18300619c321614397">00105</link> <emphasis role="preprocessor">#define&#32;EXPECT_DOUBLE_EQ(expected,&#32;actual)&#32;gtest_lite::EXPECT_(expected,&#32;actual,&#32;gtest_lite::almostEQ,&#32;__FILE__,&#32;__LINE__,&#32;&quot;EXPECT_DOUBLE_EQ(&quot;</emphasis>&#32;#expected&#32;&quot;,&#32;&quot;&#32;#actual&#32;&quot;)&quot;&#32;)
<anchor xml:id="_gtest__lite_8h_source_1l00106"/>00106 
<anchor xml:id="_gtest__lite_8h_source_1l00108"/><link linkend="_gtest__lite_8h_1a5b4b193a92c39b99d7b9404c49feef0b">00108</link> <emphasis role="preprocessor">#define&#32;EXPECT_STREQ(expected,&#32;actual)&#32;gtest_lite::EXPECTSTR(expected,&#32;actual,&#32;gtest_lite::eqstr,&#32;__FILE__,&#32;__LINE__,&#32;&quot;EXPECT_STREQ(&quot;</emphasis>&#32;#expected&#32;&quot;,&#32;&quot;&#32;#actual&#32;&quot;)&quot;&#32;)
<anchor xml:id="_gtest__lite_8h_source_1l00109"/>00109 
<anchor xml:id="_gtest__lite_8h_source_1l00111"/><link linkend="_gtest__lite_8h_1aa511aad7b6a6a8e8d0279f16d925b094">00111</link> <emphasis role="preprocessor">#define&#32;EXPECT_STRNE(expected,&#32;actual)&#32;gtest_lite::EXPECTSTR(expected,&#32;actual,&#32;gtest_lite::nestr,&#32;__FILE__,&#32;__LINE__,&#32;&quot;EXPECT_STRNE(&quot;</emphasis>&#32;#expected&#32;&quot;,&#32;&quot;&#32;#actual&#32;&quot;)&quot;,&#32;&quot;etalon&quot;&#32;)
<anchor xml:id="_gtest__lite_8h_source_1l00112"/>00112 
<anchor xml:id="_gtest__lite_8h_source_1l00114"/><link linkend="_gtest__lite_8h_1a4b4fe697f312ef7d2618905a9bc12f04">00114</link> <emphasis role="preprocessor">#define&#32;EXPECT_THROW(statement,&#32;exception_type)&#32;try&#32;{&#32;gtest_lite::test.tmp&#32;=&#32;false;&#32;statement;&#32;}&#32;\</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00115"/>00115 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;catch&#32;(exception_type)&#32;{&#32;gtest_lite::test.tmp&#32;=&#32;true;&#32;}&#32;\</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00116"/>00116 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;catch&#32;(...)&#32;{&#32;}&#32;\</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00117"/>00117 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;EXPECTTHROW(statement,&#32;&quot;kivetelt&#32;dob.&quot;</emphasis>,&#32;&quot;nem&#32;dobott&#32;&apos;&quot;#exception_type&quot;&apos;&#32;kivetelt.&quot;)
<anchor xml:id="_gtest__lite_8h_source_1l00118"/>00118 
<anchor xml:id="_gtest__lite_8h_source_1l00120"/><link linkend="_gtest__lite_8h_1a9be43f44d148e8a8d6a89c864bf4e461">00120</link> <emphasis role="preprocessor">#define&#32;EXPECT_ANY_THROW(statement)&#32;try&#32;{&#32;gtest_lite::test.tmp&#32;=&#32;false;&#32;statement;&#32;}&#32;\</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00121"/>00121 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;catch&#32;(...)&#32;{&#32;gtest_lite::test.tmp&#32;=&#32;true;&#32;}&#32;\</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00122"/>00122 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;EXPECTTHROW(statement,&#32;&quot;kivetelt&#32;dob.&quot;</emphasis>,&#32;&quot;nem&#32;dobott&#32;kivetelt.&quot;)
<anchor xml:id="_gtest__lite_8h_source_1l00123"/>00123 
<anchor xml:id="_gtest__lite_8h_source_1l00125"/><link linkend="_gtest__lite_8h_1a2743a1438137ad857aa3f9fec3ff67ec">00125</link> <emphasis role="preprocessor">#define&#32;EXPECT_NO_THROW(statement)&#32;try&#32;{&#32;gtest_lite::test.tmp&#32;=&#32;true;&#32;statement;&#32;}&#32;\</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00126"/>00126 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;catch&#32;(...)&#32;{&#32;gtest_lite::test.tmp&#32;=&#32;false;&#32;}\</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00127"/>00127 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;EXPECTTHROW(statement,&#32;&quot;nem&#32;dob&#32;kivetelt.&quot;</emphasis>,&#32;&quot;kivetelt&#32;dobott.&quot;)
<anchor xml:id="_gtest__lite_8h_source_1l00128"/>00128 
<anchor xml:id="_gtest__lite_8h_source_1l00130"/><link linkend="_gtest__lite_8h_1a895c34d9b192cdc2ba46d2680623485d">00130</link> <emphasis role="preprocessor">#define&#32;ASSERT_NO_THROW(statement)&#32;try&#32;{&#32;gtest_lite::test.tmp&#32;=&#32;true;&#32;statement;&#32;}&#32;\</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00131"/>00131 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;catch&#32;(...)&#32;{&#32;gtest_lite::test.tmp&#32;=&#32;false;&#32;}\</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00132"/>00132 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;EXPECTTHROW(statement,&#32;&quot;nem&#32;dob&#32;kivetelt.&quot;</emphasis>,&#32;&quot;kivetelt&#32;dobott.&quot;)
<anchor xml:id="_gtest__lite_8h_source_1l00133"/>00133 
<anchor xml:id="_gtest__lite_8h_source_1l00135"/><link linkend="_gtest__lite_8h_1a5129ea3a961fbd7fe71e6621452047bf">00135</link> <emphasis role="preprocessor">#define&#32;EXPECT_THROW_THROW(statement,&#32;exception_type)&#32;try&#32;{&#32;gtest_lite::test.tmp&#32;=&#32;false;&#32;statement;&#32;}&#32;\</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00136"/>00136 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;catch&#32;(exception_type)&#32;{&#32;gtest_lite::test.tmp&#32;=&#32;true;&#32;throw;&#32;}&#32;\</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00137"/>00137 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;EXPECTTHROW(statement,&#32;&quot;kivetelt&#32;dob.&quot;</emphasis>,&#32;&quot;nem&#32;dobott&#32;&apos;&quot;#exception_type&quot;&apos;&#32;kivetelt.&quot;)
<anchor xml:id="_gtest__lite_8h_source_1l00138"/>00138 
<anchor xml:id="_gtest__lite_8h_source_1l00145"/><link linkend="_gtest__lite_8h_1a34bf9a881eb6b2800b0e6cb0abdbd319">00145</link> <emphasis role="preprocessor">#define&#32;CREATE_Has_(X)&#32;\</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00146"/>00146 <emphasis role="preprocessor">template&lt;typename&#32;T&gt;&#32;struct&#32;_Has_##X&#32;{&#32;&#32;\</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00147"/>00147 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;struct&#32;Fallback&#32;{&#32;int&#32;X;&#32;};&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00148"/>00148 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;struct&#32;Derived&#32;:&#32;T,&#32;Fallback&#32;{};&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00149"/>00149 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;typename&#32;C,&#32;C&gt;&#32;struct&#32;ChT;&#32;\</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00150"/>00150 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;typename&#32;D&gt;&#32;static&#32;char&#32;(&amp;f(ChT&lt;int&#32;Fallback::*,&#32;&amp;D::X&gt;*))[1];&#32;\</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00151"/>00151 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;typename&#32;D&gt;&#32;static&#32;char&#32;(&amp;f(...))[2];&#32;\</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00152"/>00152 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static&#32;bool&#32;const&#32;member&#32;=&#32;sizeof(f&lt;Derived&gt;(0))&#32;==&#32;2;&#32;\</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00153"/>00153 <emphasis role="preprocessor">};</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00154"/>00154 
<anchor xml:id="_gtest__lite_8h_source_1l00157"/><link linkend="_gtest__lite_8h_1aa57e54fc7cbf742de576263d90ee1660">00157</link> <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_gtest__lite_8h_1aa57e54fc7cbf742de576263d90ee1660">hasMember</link>(...)&#32;{}
<anchor xml:id="_gtest__lite_8h_source_1l00158"/>00158 
<anchor xml:id="_gtest__lite_8h_source_1l00160"/>00160 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;F,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_gtest__lite_8h_source_1l00161"/><link linkend="_struct___is___types">00161</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct___is___types">_Is_Types</link>&#32;{
<anchor xml:id="_gtest__lite_8h_source_1l00162"/>00162 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;D&gt;&#32;<emphasis role="keyword">static</emphasis>&#32;char&#32;(&amp;f(D))[1];
<anchor xml:id="_gtest__lite_8h_source_1l00163"/>00163 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;D&gt;&#32;<emphasis role="keyword">static</emphasis>&#32;char&#32;(&amp;f(...))[2];
<anchor xml:id="_gtest__lite_8h_source_1l00164"/>00164 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;convertable&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(f&lt;T&gt;(F()))&#32;==&#32;1;
<anchor xml:id="_gtest__lite_8h_source_1l00165"/>00165 };
<anchor xml:id="_gtest__lite_8h_source_1l00166"/>00166 
<anchor xml:id="_gtest__lite_8h_source_1l00171"/>00171 
<anchor xml:id="_gtest__lite_8h_source_1l00173"/><link linkend="_gtest__lite_8h_1a59f6c1f1654aa9d5adf5c143efd1a454">00173</link> <emphasis role="preprocessor">#define&#32;EXPECTTHROW(statement,&#32;exp,&#32;act)&#32;gtest_lite::test.expect(gtest_lite::test.tmp,&#32;__FILE__,&#32;__LINE__,&#32;#statement)&#32;\</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00174"/>00174 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&lt;&lt;&#32;&quot;**&#32;Az&#32;utasitas&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;(act)&#32;\
<anchor xml:id="_gtest__lite_8h_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&lt;&lt;&#32;&quot;\n**&#32;Azt&#32;vartuk,&#32;hogy&#32;&quot;&#32;&lt;&lt;&#32;(exp)&#32;&lt;&lt;&#32;std::endl
<anchor xml:id="_gtest__lite_8h_source_1l00176"/>00176 
<anchor xml:id="_gtest__lite_8h_source_1l00177"/>00177 <emphasis role="preprocessor">#ifdef&#32;CPORTA</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00178"/>00178 <emphasis role="preprocessor">#define&#32;GTINIT(is)&#32;&#32;\</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00179"/>00179 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;int&#32;magic;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00180"/>00180 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;is&#32;&gt;&gt;&#32;magic;</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00181"/>00181 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00182"/>00182 <emphasis role="preprocessor">#define&#32;GTINIT(IS)</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00183"/>00183 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CPORTA</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00184"/>00184 
<anchor xml:id="_gtest__lite_8h_source_1l00185"/>00185 <emphasis role="preprocessor">#ifdef&#32;CPORTA</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00186"/>00186 <emphasis role="preprocessor">#define&#32;GTEND(os)&#32;&#32;\</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00187"/>00187 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;os&#32;&lt;&lt;&#32;magic&#32;&lt;&lt;&#32;(gtest_lite::test.fail()&#32;?&#32;&quot;&#32;NO&quot;</emphasis>&#32;:&#32;&quot;&#32;OK?&quot;)&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_gtest__lite_8h_source_1l00188"/>00188 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00189"/>00189 <emphasis role="preprocessor">#define&#32;GTEND(os)</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00190"/>00190 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CPORTA</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00191"/>00191 
<anchor xml:id="_gtest__lite_8h_source_1l00193"/><link linkend="_namespacegtest__lite">00193</link> <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacegtest__lite">gtest_lite</link>&#32;{
<anchor xml:id="_gtest__lite_8h_source_1l00194"/>00194 
<anchor xml:id="_gtest__lite_8h_source_1l00198"/><link linkend="_structgtest__lite_1_1_test">00198</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structgtest__lite_1_1_test">Test</link>&#32;{
<anchor xml:id="_gtest__lite_8h_source_1l00199"/><link linkend="_structgtest__lite_1_1_test_1a6da678d43b72b9e2bff1c99e1d3c48f5">00199</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structgtest__lite_1_1_test_1a6da678d43b72b9e2bff1c99e1d3c48f5">sum</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_gtest__lite_8h_source_1l00200"/><link linkend="_structgtest__lite_1_1_test_1a4fb6ee7bd903717d970e3f0504cdeeab">00200</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structgtest__lite_1_1_test_1a4fb6ee7bd903717d970e3f0504cdeeab">failed</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_gtest__lite_8h_source_1l00201"/><link linkend="_structgtest__lite_1_1_test_1a91d9c63794d2b9b49e0c48d897208560">00201</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structgtest__lite_1_1_test_1a91d9c63794d2b9b49e0c48d897208560">ablocks</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_gtest__lite_8h_source_1l00202"/><link linkend="_structgtest__lite_1_1_test_1a59a9a7f0ef7867af604ce5678f7a2c13">00202</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structgtest__lite_1_1_test_1a59a9a7f0ef7867af604ce5678f7a2c13">status</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_gtest__lite_8h_source_1l00203"/><link linkend="_structgtest__lite_1_1_test_1a1145ceb335a60a808b7b4d5d1624b2a5">00203</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structgtest__lite_1_1_test_1a1145ceb335a60a808b7b4d5d1624b2a5">tmp</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_gtest__lite_8h_source_1l00204"/><link linkend="_structgtest__lite_1_1_test_1a8d495a42580e3ae337f9c4982136b700">00204</link> &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_structgtest__lite_1_1_test_1a8d495a42580e3ae337f9c4982136b700">name</link>;&#32;&#32;&#32;
<anchor xml:id="_gtest__lite_8h_source_1l00205"/><link linkend="_structgtest__lite_1_1_test_1af4784302d78bb004bcb20b7f75ec06c3">00205</link> &#32;&#32;&#32;&#32;std::fstream&#32;<link linkend="_structgtest__lite_1_1_test_1af4784302d78bb004bcb20b7f75ec06c3">null</link>;&#32;&#32;
<anchor xml:id="_gtest__lite_8h_source_1l00206"/><link linkend="_structgtest__lite_1_1_test_1aaece9ac882e0b17b295cceb7e3ca10ce">00206</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_structgtest__lite_1_1_test">Test</link>&amp;&#32;<link linkend="_structgtest__lite_1_1_test_1aaece9ac882e0b17b295cceb7e3ca10ce">getTest</link>()&#32;{
<anchor xml:id="_gtest__lite_8h_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_structgtest__lite_1_1_test">Test</link>&#32;instance;
<anchor xml:id="_gtest__lite_8h_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;instance;
<anchor xml:id="_gtest__lite_8h_source_1l00209"/>00209 &#32;&#32;&#32;&#32;}
<anchor xml:id="_gtest__lite_8h_source_1l00210"/>00210 <emphasis role="keyword">private</emphasis>:&#32;&#32;&#32;&#32;
<anchor xml:id="_gtest__lite_8h_source_1l00211"/>00211 &#32;&#32;&#32;&#32;<link linkend="_structgtest__lite_1_1_test">Test</link>()&#32;:<link linkend="_structgtest__lite_1_1_test_1a6da678d43b72b9e2bff1c99e1d3c48f5">sum</link>(0),&#32;<link linkend="_structgtest__lite_1_1_test_1a4fb6ee7bd903717d970e3f0504cdeeab">failed</link>(0),&#32;<link linkend="_structgtest__lite_1_1_test_1a59a9a7f0ef7867af604ce5678f7a2c13">status</link>(false),&#32;<link linkend="_structgtest__lite_1_1_test_1af4784302d78bb004bcb20b7f75ec06c3">null</link>(<emphasis role="stringliteral">&quot;/dev/null&quot;</emphasis>)&#32;{}
<anchor xml:id="_gtest__lite_8h_source_1l00212"/>00212 &#32;&#32;&#32;&#32;Test(<emphasis role="keyword">const</emphasis>&#32;Test&amp;);
<anchor xml:id="_gtest__lite_8h_source_1l00213"/>00213 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;Test&amp;);
<anchor xml:id="_gtest__lite_8h_source_1l00214"/>00214 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="_gtest__lite_8h_source_1l00216"/><link linkend="_structgtest__lite_1_1_test_1a2227b70fcc5dfb3c326bf117dd8f7e79">00216</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structgtest__lite_1_1_test_1a2227b70fcc5dfb3c326bf117dd8f7e79">begin</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*n)&#32;{
<anchor xml:id="_gtest__lite_8h_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structgtest__lite_1_1_test_1a8d495a42580e3ae337f9c4982136b700">name</link>&#32;=&#32;n;&#32;<link linkend="_structgtest__lite_1_1_test_1a59a9a7f0ef7867af604ce5678f7a2c13">status</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_gtest__lite_8h_source_1l00218"/>00218 <emphasis role="preprocessor">#ifdef&#32;MEMTRACE</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structgtest__lite_1_1_test_1a91d9c63794d2b9b49e0c48d897208560">ablocks</link>&#32;=&#32;memtrace::allocated_blocks();
<anchor xml:id="_gtest__lite_8h_source_1l00220"/>00220 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00221"/>00221 <emphasis role="preprocessor">#ifndef&#32;CPORTA</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n---&gt;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_structgtest__lite_1_1_test_1a8d495a42580e3ae337f9c4982136b700">name</link>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_gtest__lite_8h_source_1l00223"/>00223 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CPORTA</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++<link linkend="_structgtest__lite_1_1_test_1a6da678d43b72b9e2bff1c99e1d3c48f5">sum</link>;
<anchor xml:id="_gtest__lite_8h_source_1l00225"/>00225 &#32;&#32;&#32;&#32;}
<anchor xml:id="_gtest__lite_8h_source_1l00227"/><link linkend="_structgtest__lite_1_1_test_1a86d41ffed05f53653fb27b918764a44e">00227</link> &#32;&#32;&#32;&#32;std::ostream&amp;&#32;<link linkend="_structgtest__lite_1_1_test_1a86d41ffed05f53653fb27b918764a44e">end</link>(<emphasis role="keywordtype">bool</emphasis>&#32;memchk&#32;=&#32;<emphasis role="keyword">false</emphasis>)&#32;{
<anchor xml:id="_gtest__lite_8h_source_1l00228"/>00228 <emphasis role="preprocessor">#ifdef&#32;MEMTRACE</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(memchk&#32;&amp;&amp;&#32;<link linkend="_structgtest__lite_1_1_test_1a91d9c63794d2b9b49e0c48d897208560">ablocks</link>&#32;!=&#32;memtrace::allocated_blocks())&#32;{
<anchor xml:id="_gtest__lite_8h_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structgtest__lite_1_1_test_1a59a9a7f0ef7867af604ce5678f7a2c13">status</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_gtest__lite_8h_source_1l00231"/>00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;**&#32;Lehet,&#32;hogy&#32;nem&#32;szabaditott&#32;fel&#32;minden&#32;memoriat!&#32;**&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_gtest__lite_8h_source_1l00232"/>00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_gtest__lite_8h_source_1l00233"/>00233 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00234"/>00234 <emphasis role="preprocessor">#ifdef&#32;CPORTA</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00235"/>00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_structgtest__lite_1_1_test_1a59a9a7f0ef7867af604ce5678f7a2c13">status</link>)
<anchor xml:id="_gtest__lite_8h_source_1l00236"/>00236 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CPORTA</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00237"/>00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;(<link linkend="_structgtest__lite_1_1_test_1a59a9a7f0ef7867af604ce5678f7a2c13">status</link>&#32;?&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;SIKERES&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;**&#32;HIBAS&#32;****&quot;</emphasis>)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_structgtest__lite_1_1_test_1a8d495a42580e3ae337f9c4982136b700">name</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&lt;---&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_gtest__lite_8h_source_1l00238"/>00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_structgtest__lite_1_1_test_1a59a9a7f0ef7867af604ce5678f7a2c13">status</link>)
<anchor xml:id="_gtest__lite_8h_source_1l00239"/>00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::cerr;
<anchor xml:id="_gtest__lite_8h_source_1l00240"/>00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00241"/>00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structgtest__lite_1_1_test_1af4784302d78bb004bcb20b7f75ec06c3">null</link>;
<anchor xml:id="_gtest__lite_8h_source_1l00242"/>00242 &#32;&#32;&#32;&#32;}
<anchor xml:id="_gtest__lite_8h_source_1l00243"/>00243 
<anchor xml:id="_gtest__lite_8h_source_1l00244"/>00244 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;fail()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structgtest__lite_1_1_test_1a4fb6ee7bd903717d970e3f0504cdeeab">failed</link>;&#32;}
<anchor xml:id="_gtest__lite_8h_source_1l00245"/>00245 
<anchor xml:id="_gtest__lite_8h_source_1l00247"/><link linkend="_structgtest__lite_1_1_test_1a2de71946be5b3dc7f03c99868785c1de">00247</link> &#32;&#32;&#32;&#32;std::ostream&amp;&#32;<link linkend="_structgtest__lite_1_1_test_1a2de71946be5b3dc7f03c99868785c1de">expect</link>(<emphasis role="keywordtype">bool</emphasis>&#32;st,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*expr,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;pr&#32;=&#32;<emphasis role="keyword">false</emphasis>)&#32;{
<anchor xml:id="_gtest__lite_8h_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!st)&#32;{
<anchor xml:id="_gtest__lite_8h_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++<link linkend="_structgtest__lite_1_1_test_1a4fb6ee7bd903717d970e3f0504cdeeab">failed</link>;
<anchor xml:id="_gtest__lite_8h_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structgtest__lite_1_1_test_1a59a9a7f0ef7867af604ce5678f7a2c13">status</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_gtest__lite_8h_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_gtest__lite_8h_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!st&#32;||&#32;pr)&#32;{
<anchor xml:id="_gtest__lite_8h_source_1l00253"/>00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;str(file);
<anchor xml:id="_gtest__lite_8h_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;str.rfind(<emphasis role="stringliteral">&quot;\\&quot;</emphasis>);
<anchor xml:id="_gtest__lite_8h_source_1l00255"/>00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;==&#32;std::string::npos)&#32;i&#32;=&#32;str.rfind(<emphasis role="stringliteral">&quot;/&quot;</emphasis>);
<anchor xml:id="_gtest__lite_8h_source_1l00256"/>00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;==&#32;std::string::npos)&#32;i&#32;=&#32;0;&#32;<emphasis role="keywordflow">else</emphasis>&#32;i++;
<anchor xml:id="_gtest__lite_8h_source_1l00257"/>00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n****&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;&amp;file[i]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;(&quot;</emphasis>&#32;&lt;&lt;&#32;line&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;):&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;expr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;****&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_gtest__lite_8h_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_gtest__lite_8h_source_1l00259"/>00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structgtest__lite_1_1_test_1af4784302d78bb004bcb20b7f75ec06c3">null</link>;
<anchor xml:id="_gtest__lite_8h_source_1l00260"/>00260 &#32;&#32;&#32;&#32;}
<anchor xml:id="_gtest__lite_8h_source_1l00261"/>00261 
<anchor xml:id="_gtest__lite_8h_source_1l00263"/><link linkend="_structgtest__lite_1_1_test_1a5a879233c2aa110626668c06140f6e71">00263</link> &#32;&#32;&#32;&#32;<link linkend="_structgtest__lite_1_1_test_1a5a879233c2aa110626668c06140f6e71">~Test</link>()&#32;{
<anchor xml:id="_gtest__lite_8h_source_1l00264"/>00264 <emphasis role="preprocessor">#ifdef&#32;CPORTA</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_structgtest__lite_1_1_test_1a4fb6ee7bd903717d970e3f0504cdeeab">failed</link>)
<anchor xml:id="_gtest__lite_8h_source_1l00266"/>00266 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CPORTA</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n====&#32;TESZT&#32;VEGE&#32;====&#32;HIBAS/OSSZES:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_structgtest__lite_1_1_test_1a4fb6ee7bd903717d970e3f0504cdeeab">failed</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;/&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_structgtest__lite_1_1_test_1a6da678d43b72b9e2bff1c99e1d3c48f5">sum</link>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_gtest__lite_8h_source_1l00268"/>00268 &#32;&#32;&#32;&#32;}
<anchor xml:id="_gtest__lite_8h_source_1l00269"/>00269 };
<anchor xml:id="_gtest__lite_8h_source_1l00270"/>00270 
<anchor xml:id="_gtest__lite_8h_source_1l00273"/>00273 <emphasis role="keyword">static</emphasis>&#32;Test&amp;&#32;test&#32;=&#32;<link linkend="_structgtest__lite_1_1_test_1aaece9ac882e0b17b295cceb7e3ca10ce">Test::getTest</link>();
<anchor xml:id="_gtest__lite_8h_source_1l00274"/>00274 
<anchor xml:id="_gtest__lite_8h_source_1l00276"/>00276 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;T2&gt;
<anchor xml:id="_gtest__lite_8h_source_1l00277"/><link linkend="_namespacegtest__lite_1a08a262d95a0ec540c93b06b2aaccf34c">00277</link> std::ostream&amp;&#32;<link linkend="_namespacegtest__lite_1a08a262d95a0ec540c93b06b2aaccf34c">EXPECT_</link>(T1&#32;exp,&#32;T2&#32;act,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;(*pred)(T1,&#32;T2),&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line,
<anchor xml:id="_gtest__lite_8h_source_1l00278"/>00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*expr,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*lhs&#32;=&#32;<emphasis role="stringliteral">&quot;elvart&quot;</emphasis>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*rhs&#32;=&#32;<emphasis role="stringliteral">&quot;aktual&quot;</emphasis>)&#32;{
<anchor xml:id="_gtest__lite_8h_source_1l00279"/>00279 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;test.<link linkend="_structgtest__lite_1_1_test_1a2de71946be5b3dc7f03c99868785c1de">expect</link>(pred(exp,&#32;act),&#32;file,&#32;line,&#32;expr)
<anchor xml:id="_gtest__lite_8h_source_1l00280"/>00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;**&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;lhs&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;std::boolalpha&#32;&lt;&lt;&#32;exp
<anchor xml:id="_gtest__lite_8h_source_1l00281"/>00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n**&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;rhs&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;std::boolalpha&#32;&lt;&lt;&#32;act&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_gtest__lite_8h_source_1l00282"/>00282 }
<anchor xml:id="_gtest__lite_8h_source_1l00283"/>00283 
<anchor xml:id="_gtest__lite_8h_source_1l00285"/>00285 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;T2&gt;
<anchor xml:id="_gtest__lite_8h_source_1l00286"/><link linkend="_namespacegtest__lite_1a5514f204ca041ae1a1d947a4b5d53ade">00286</link> std::ostream&amp;&#32;<link linkend="_namespacegtest__lite_1a08a262d95a0ec540c93b06b2aaccf34c">EXPECT_</link>(T1*&#32;exp,&#32;T2*&#32;act,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;(*pred)(T1*,&#32;T2*),&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line,
<anchor xml:id="_gtest__lite_8h_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*expr,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*lhs&#32;=&#32;<emphasis role="stringliteral">&quot;elvart&quot;</emphasis>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*rhs&#32;=&#32;<emphasis role="stringliteral">&quot;aktual&quot;</emphasis>)&#32;{
<anchor xml:id="_gtest__lite_8h_source_1l00288"/>00288 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;test.<link linkend="_structgtest__lite_1_1_test_1a2de71946be5b3dc7f03c99868785c1de">expect</link>(pred(exp,&#32;act),&#32;file,&#32;line,&#32;expr)
<anchor xml:id="_gtest__lite_8h_source_1l00289"/>00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;**&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;lhs&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;(<emphasis role="keywordtype">void</emphasis>*)&#32;exp
<anchor xml:id="_gtest__lite_8h_source_1l00290"/>00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n**&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;rhs&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;(<emphasis role="keywordtype">void</emphasis>*)&#32;act&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_gtest__lite_8h_source_1l00291"/>00291 }
<anchor xml:id="_gtest__lite_8h_source_1l00292"/>00292 
<anchor xml:id="_gtest__lite_8h_source_1l00293"/>00293 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00295"/>00295 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T1&gt;
<anchor xml:id="_gtest__lite_8h_source_1l00296"/>00296 std::ostream&amp;&#32;<link linkend="_namespacegtest__lite_1a08a262d95a0ec540c93b06b2aaccf34c">EXPECT_</link>(T1*&#32;exp,&#32;std::nullptr_t&#32;act,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;(*pred)(T1*,&#32;std::nullptr_t),&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line,
<anchor xml:id="_gtest__lite_8h_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*expr,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*lhs&#32;=&#32;<emphasis role="stringliteral">&quot;elvart&quot;</emphasis>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*rhs&#32;=&#32;<emphasis role="stringliteral">&quot;aktual&quot;</emphasis>)&#32;{
<anchor xml:id="_gtest__lite_8h_source_1l00298"/>00298 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;test.<link linkend="_structgtest__lite_1_1_test_1a2de71946be5b3dc7f03c99868785c1de">expect</link>(pred(exp,&#32;act),&#32;file,&#32;line,&#32;expr)
<anchor xml:id="_gtest__lite_8h_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;**&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;lhs&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;(<emphasis role="keywordtype">void</emphasis>*)&#32;exp
<anchor xml:id="_gtest__lite_8h_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n**&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;rhs&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;(<emphasis role="keywordtype">void</emphasis>*)&#32;act&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_gtest__lite_8h_source_1l00301"/>00301 }
<anchor xml:id="_gtest__lite_8h_source_1l00302"/>00302 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00303"/>00303 
<anchor xml:id="_gtest__lite_8h_source_1l00306"/>00306 <emphasis role="keyword">inline</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00307"/><link linkend="_namespacegtest__lite_1afe00777c74c96b1548747863956e20a3">00307</link> std::ostream&amp;&#32;<link linkend="_namespacegtest__lite_1afe00777c74c96b1548747863956e20a3">EXPECTSTR</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*exp,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*act,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;(*pred)(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*),&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line,
<anchor xml:id="_gtest__lite_8h_source_1l00308"/>00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*expr,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*lhs&#32;=&#32;<emphasis role="stringliteral">&quot;elvart&quot;</emphasis>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*rhs&#32;=&#32;<emphasis role="stringliteral">&quot;aktual&quot;</emphasis>)&#32;{
<anchor xml:id="_gtest__lite_8h_source_1l00309"/>00309 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;test.<link linkend="_structgtest__lite_1_1_test_1a2de71946be5b3dc7f03c99868785c1de">expect</link>(pred(exp,&#32;act),&#32;file,&#32;line,&#32;expr)
<anchor xml:id="_gtest__lite_8h_source_1l00310"/>00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;**&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;lhs&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;(exp&#32;==&#32;NULL&#32;?&#32;<emphasis role="stringliteral">&quot;NULL&#32;pointer&quot;</emphasis>&#32;:&#32;std::string(<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>)&#32;+&#32;exp&#32;+&#32;std::string(<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>))
<anchor xml:id="_gtest__lite_8h_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n**&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;rhs&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;(act&#32;==&#32;NULL&#32;?&#32;<emphasis role="stringliteral">&quot;NULL&#32;pointer&quot;</emphasis>&#32;:&#32;std::string(<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>)&#32;+&#32;act&#32;+&#32;std::string(<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>))&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_gtest__lite_8h_source_1l00312"/>00312 }
<anchor xml:id="_gtest__lite_8h_source_1l00313"/>00313 
<anchor xml:id="_gtest__lite_8h_source_1l00316"/>00316 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;T2&gt;
<anchor xml:id="_gtest__lite_8h_source_1l00317"/><link linkend="_namespacegtest__lite_1a884f0c7c25d80d78a73c759a8fc43a3d">00317</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacegtest__lite_1a884f0c7c25d80d78a73c759a8fc43a3d">eq</link>(T1&#32;a,&#32;T2&#32;b)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;a&#32;==&#32;b;&#32;}
<anchor xml:id="_gtest__lite_8h_source_1l00318"/>00318 
<anchor xml:id="_gtest__lite_8h_source_1l00319"/>00319 <emphasis role="keyword">inline</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00320"/>00320 <emphasis role="keywordtype">bool</emphasis>&#32;eqstr(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*a,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*b)&#32;{
<anchor xml:id="_gtest__lite_8h_source_1l00321"/>00321 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(a&#32;!=&#32;NULL&#32;&amp;&amp;&#32;b&#32;!=&#32;NULL)
<anchor xml:id="_gtest__lite_8h_source_1l00322"/>00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;strcmp(a,&#32;b)&#32;==&#32;0;
<anchor xml:id="_gtest__lite_8h_source_1l00323"/>00323 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_gtest__lite_8h_source_1l00324"/>00324 }
<anchor xml:id="_gtest__lite_8h_source_1l00325"/>00325 
<anchor xml:id="_gtest__lite_8h_source_1l00326"/>00326 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;T2&gt;
<anchor xml:id="_gtest__lite_8h_source_1l00327"/>00327 <emphasis role="keywordtype">bool</emphasis>&#32;ne(T1&#32;a,&#32;T2&#32;b)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;a&#32;!=&#32;b;&#32;}
<anchor xml:id="_gtest__lite_8h_source_1l00328"/>00328 
<anchor xml:id="_gtest__lite_8h_source_1l00329"/>00329 <emphasis role="keyword">inline</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00330"/>00330 <emphasis role="keywordtype">bool</emphasis>&#32;nestr(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*a,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*b)&#32;{
<anchor xml:id="_gtest__lite_8h_source_1l00331"/>00331 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(a&#32;!=&#32;NULL&#32;&amp;&amp;&#32;b&#32;!=&#32;NULL)
<anchor xml:id="_gtest__lite_8h_source_1l00332"/>00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;strcmp(a,&#32;b)&#32;!=&#32;0;
<anchor xml:id="_gtest__lite_8h_source_1l00333"/>00333 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_gtest__lite_8h_source_1l00334"/>00334 }
<anchor xml:id="_gtest__lite_8h_source_1l00335"/>00335 
<anchor xml:id="_gtest__lite_8h_source_1l00336"/>00336 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;T2&gt;
<anchor xml:id="_gtest__lite_8h_source_1l00337"/>00337 <emphasis role="keywordtype">bool</emphasis>&#32;le(T1&#32;a,&#32;T2&#32;b)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;a&#32;&lt;=&#32;b;&#32;}
<anchor xml:id="_gtest__lite_8h_source_1l00338"/>00338 
<anchor xml:id="_gtest__lite_8h_source_1l00339"/>00339 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;T2&gt;
<anchor xml:id="_gtest__lite_8h_source_1l00340"/>00340 <emphasis role="keywordtype">bool</emphasis>&#32;lt(T1&#32;a,&#32;T2&#32;b)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;a&#32;&lt;&#32;b;&#32;}
<anchor xml:id="_gtest__lite_8h_source_1l00341"/>00341 
<anchor xml:id="_gtest__lite_8h_source_1l00342"/>00342 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;T2&gt;
<anchor xml:id="_gtest__lite_8h_source_1l00343"/>00343 <emphasis role="keywordtype">bool</emphasis>&#32;ge(T1&#32;a,&#32;T2&#32;b)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;a&#32;&gt;=&#32;b;&#32;}
<anchor xml:id="_gtest__lite_8h_source_1l00344"/>00344 
<anchor xml:id="_gtest__lite_8h_source_1l00345"/>00345 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;T2&gt;
<anchor xml:id="_gtest__lite_8h_source_1l00346"/>00346 <emphasis role="keywordtype">bool</emphasis>&#32;gt(T1&#32;a,&#32;T2&#32;b)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;a&#32;&gt;&#32;b;&#32;}
<anchor xml:id="_gtest__lite_8h_source_1l00347"/>00347 
<anchor xml:id="_gtest__lite_8h_source_1l00352"/>00352 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_gtest__lite_8h_source_1l00353"/><link linkend="_namespacegtest__lite_1affbf9748c4e4dec6db137f7c147fee61">00353</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacegtest__lite_1affbf9748c4e4dec6db137f7c147fee61">almostEQ</link>(T&#32;a,&#32;T&#32;&#32;b)&#32;{
<anchor xml:id="_gtest__lite_8h_source_1l00354"/>00354 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;eps:&#32;ha&#32;a&#32;relatív,&#32;vagy&#32;abszolút&#32;hiba&#32;ettől&#32;kisebb,&#32;akkor&#32;elfogadjuk</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00355"/>00355 &#32;&#32;&#32;&#32;T&#32;eps&#32;=&#32;10&#32;*&#32;std::numeric_limits&lt;T&gt;::epsilon();&#32;<emphasis role="comment">//&#32;10-szer&#32;a&#32;legkisebb&#32;érték</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00356"/>00356 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(a&#32;==&#32;b)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_gtest__lite_8h_source_1l00357"/>00357 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fabs(a&#32;-&#32;b)&#32;&lt;&#32;eps)
<anchor xml:id="_gtest__lite_8h_source_1l00358"/>00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_gtest__lite_8h_source_1l00359"/>00359 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;aa&#32;=&#32;fabs(a);
<anchor xml:id="_gtest__lite_8h_source_1l00360"/>00360 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;ba&#32;=&#32;fabs(b);
<anchor xml:id="_gtest__lite_8h_source_1l00361"/>00361 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(aa&#32;&lt;&#32;ba)&#32;{
<anchor xml:id="_gtest__lite_8h_source_1l00362"/>00362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;aa&#32;=&#32;ba;
<anchor xml:id="_gtest__lite_8h_source_1l00363"/>00363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ba&#32;=&#32;fabs(a);
<anchor xml:id="_gtest__lite_8h_source_1l00364"/>00364 &#32;&#32;&#32;&#32;}
<anchor xml:id="_gtest__lite_8h_source_1l00365"/>00365 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(aa&#32;-&#32;ba)&#32;&lt;&#32;aa&#32;*&#32;eps;
<anchor xml:id="_gtest__lite_8h_source_1l00366"/>00366 }
<anchor xml:id="_gtest__lite_8h_source_1l00367"/>00367 
<anchor xml:id="_gtest__lite_8h_source_1l00368"/>00368 }&#32;<emphasis role="comment">//&#32;namespace&#32;gtest_lite</emphasis>
<anchor xml:id="_gtest__lite_8h_source_1l00369"/>00369 
<anchor xml:id="_gtest__lite_8h_source_1l00370"/>00370 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;GTEST_LITE_H</emphasis>
</programlisting></section>
