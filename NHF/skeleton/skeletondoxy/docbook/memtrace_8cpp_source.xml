<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_memtrace_8cpp_source" xml:lang="en-US">
<title>memtrace.cpp</title>
<programlisting linenumbering="unnumbered"><anchor xml:id="_memtrace_8cpp_source_1l00001"/>00001 <emphasis role="comment">/*********************************</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00002"/>00002 <emphasis role="comment">Memoriaszivargas-detektor</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00003"/>00003 <emphasis role="comment">Keszitette:&#32;Peregi&#32;Tamas,&#32;BME&#32;IIT,&#32;2011</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00004"/>00004 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;petamas@iit.bme.hu</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00005"/>00005 <emphasis role="comment">Kanari:&#32;&#32;&#32;&#32;&#32;Szeberenyi&#32;Imre,&#32;2013.</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00006"/>00006 <emphasis role="comment">VS&#32;2012:&#32;&#32;&#32;&#32;Szeber√©nyi&#32;Imre,&#32;2015.,</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00007"/>00007 <emphasis role="comment">mem_dump:&#32;&#32;&#32;2016.</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00008"/>00008 <emphasis role="comment">meset&#32;felszabaditaskor:&#32;2018.</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00009"/>00009 <emphasis role="comment">typo:&#32;&#32;&#32;&#32;&#32;&#32;&#32;2019.</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00010"/>00010 <emphasis role="comment">*********************************/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00011"/>00011 
<anchor xml:id="_memtrace_8cpp_source_1l00012"/>00012 <emphasis role="comment">/*definialni&#32;kell,&#32;ha&#32;nem&#32;paracssorbol&#32;allitjuk&#32;be&#32;(-DMEMTRACE)&#32;*/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00013"/>00013 <emphasis role="comment">/*#define&#32;MEMTRACE&#32;*/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00014"/>00014 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00015"/>00015 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;_CRT_SECURE_NO_WARNINGS&#32;1</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00016"/>00016 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00017"/>00017 
<anchor xml:id="_memtrace_8cpp_source_1l00018"/>00018 <emphasis role="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00019"/>00019 <emphasis role="preprocessor">#include&#32;&lt;stdlib.h&gt;</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00020"/>00020 <emphasis role="preprocessor">#include&#32;&lt;string.h&gt;</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00021"/>00021 <emphasis role="preprocessor">#include&#32;&lt;time.h&gt;</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00022"/>00022 <emphasis role="preprocessor">#include&#32;&lt;ctype.h&gt;</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00023"/>00023 
<anchor xml:id="_memtrace_8cpp_source_1l00024"/>00024 <emphasis role="preprocessor">#ifdef&#32;MEMTRACE</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00025"/>00025 <emphasis role="preprocessor">#define&#32;FROM_MEMTRACE_CPP</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00026"/>00026 <emphasis role="preprocessor">#include&#32;&quot;memtrace.h&quot;</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00027"/>00027 
<anchor xml:id="_memtrace_8cpp_source_1l00028"/>00028 <emphasis role="preprocessor">#define&#32;FMALLOC&#32;0</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00029"/>00029 <emphasis role="preprocessor">#define&#32;FCALLOC&#32;1</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00030"/>00030 <emphasis role="preprocessor">#define&#32;FREALLOC&#32;2</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00031"/>00031 <emphasis role="preprocessor">#define&#32;FFREE&#32;3</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00032"/>00032 <emphasis role="preprocessor">#define&#32;FNEW&#32;4</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00033"/>00033 <emphasis role="preprocessor">#define&#32;FDELETE&#32;5</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00034"/>00034 <emphasis role="preprocessor">#define&#32;FNEWARR&#32;6</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00035"/>00035 <emphasis role="preprocessor">#define&#32;FDELETEARR&#32;7</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00036"/>00036 <emphasis role="preprocessor">#define&#32;COMP(a,d)&#32;(((a)&lt;=3&#32;&amp;&amp;&#32;(d)&lt;=3)&#32;||&#32;((d)==(a)+1))</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00037"/>00037 <emphasis role="preprocessor">#define&#32;PU(p)&#32;&#32;&#32;((char*)p+CANARY_LEN)&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;mem&#32;pointerbol&#32;user&#32;poi</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00038"/>00038 <emphasis role="preprocessor">#define&#32;P(pu)&#32;&#32;&#32;((char*)pu-CANARY_LEN)&#32;&#32;</emphasis><emphasis role="comment">//&#32;user&#32;pointerbol&#32;mem&#32;poi</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00039"/>00039 <emphasis role="preprocessor">#define&#32;XSTR(s)&#32;STR(s)</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00040"/>00040 <emphasis role="preprocessor">#define&#32;STR(s)&#32;&#32;#s</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00041"/>00041 <emphasis role="comment">/*******************************************************************/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00042"/>00042 <emphasis role="comment">/*&#32;Segedfuggvenyek&#32;es&#32;egyebek&#32;*/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00043"/>00043 <emphasis role="comment">/*******************************************************************/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00044"/>00044 START_NAMESPACE
<anchor xml:id="_memtrace_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;FILE&#32;*fperror;
<anchor xml:id="_memtrace_8cpp_source_1l00046"/>00046 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#ifdef&#32;MEMTRACE_TO_MEMORY</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;CANARY_LEN&#32;=&#32;64;
<anchor xml:id="_memtrace_8cpp_source_1l00048"/>00048 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#else</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;CANARY_LEN&#32;=&#32;0;
<anchor xml:id="_memtrace_8cpp_source_1l00050"/>00050 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;canary_byte1&#32;=&#32;<emphasis role="charliteral">&apos;k&apos;</emphasis>;
<anchor xml:id="_memtrace_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;canary_byte2&#32;=&#32;<emphasis role="charliteral">&apos;K&apos;</emphasis>;
<anchor xml:id="_memtrace_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;random_byte;
<anchor xml:id="_memtrace_8cpp_source_1l00054"/>00054 
<anchor xml:id="_memtrace_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;{FALSE,TRUE}&#32;BOOL;
<anchor xml:id="_memtrace_8cpp_source_1l00056"/>00056 
<anchor xml:id="_memtrace_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;pretty[]&#32;=&#32;{<emphasis role="stringliteral">&quot;malloc(&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;calloc(&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;realloc(&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;free(&quot;</emphasis>,
<anchor xml:id="_memtrace_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;new&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;delete&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;new[]&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;delete[]&quot;</emphasis>};
<anchor xml:id="_memtrace_8cpp_source_1l00059"/>00059 
<anchor xml:id="_memtrace_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;basename(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;s)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*s1,*s2;
<anchor xml:id="_memtrace_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s1&#32;=&#32;strrchr(s,<emphasis role="charliteral">&apos;/&apos;</emphasis>);
<anchor xml:id="_memtrace_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(s1==NULL)&#32;s1&#32;=&#32;s;&#32;<emphasis role="keywordflow">else</emphasis>&#32;s1++;
<anchor xml:id="_memtrace_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s2&#32;=&#32;strrchr(s1,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>);
<anchor xml:id="_memtrace_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(s2==NULL)&#32;s2&#32;=&#32;s1;&#32;<emphasis role="keywordflow">else</emphasis>&#32;s2++;
<anchor xml:id="_memtrace_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s2;
<anchor xml:id="_memtrace_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00068"/>00068 
<anchor xml:id="_memtrace_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*StrCpy(<emphasis role="keywordtype">char</emphasis>&#32;**&#32;to,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;from)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(from&#32;==&#32;NULL)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*to&#32;=&#32;NULL;
<anchor xml:id="_memtrace_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*to&#32;=&#32;(<emphasis role="keywordtype">char</emphasis>*)malloc(strlen(from)+1);
<anchor xml:id="_memtrace_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(*to)&#32;strcpy(*to,&#32;from);
<anchor xml:id="_memtrace_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*to;
<anchor xml:id="_memtrace_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00078"/>00078 
<anchor xml:id="_memtrace_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*canary_malloc(<emphasis role="keywordtype">size_t</emphasis>&#32;size,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;data)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*p&#32;=&#32;(<emphasis role="keywordtype">char</emphasis>&#32;*)malloc(size+2*CANARY_LEN);
<anchor xml:id="_memtrace_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memset(p,&#32;canary_byte1,&#32;CANARY_LEN);
<anchor xml:id="_memtrace_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memset(p+CANARY_LEN,&#32;data,&#32;size);
<anchor xml:id="_memtrace_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memset(p+CANARY_LEN+size,&#32;canary_byte2,&#32;CANARY_LEN);
<anchor xml:id="_memtrace_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p;
<anchor xml:id="_memtrace_8cpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00088"/>00088 
<anchor xml:id="_memtrace_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;chk_canary(<emphasis role="keywordtype">void</emphasis>&#32;*p,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*pc&#32;=&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)p;
<anchor xml:id="_memtrace_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
<anchor xml:id="_memtrace_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;CANARY_LEN;&#32;i++)
<anchor xml:id="_memtrace_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pc[i]&#32;!=&#32;canary_byte1)
<anchor xml:id="_memtrace_8cpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
<anchor xml:id="_memtrace_8cpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pc&#32;+=&#32;CANARY_LEN+size;
<anchor xml:id="_memtrace_8cpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;CANARY_LEN;&#32;i++)
<anchor xml:id="_memtrace_8cpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pc[i]&#32;!=&#32;canary_byte2)
<anchor xml:id="_memtrace_8cpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
<anchor xml:id="_memtrace_8cpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_memtrace_8cpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00101"/>00101 
<anchor xml:id="_memtrace_8cpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{
<anchor xml:id="_memtrace_8cpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;f;&#32;&#32;<emphasis role="comment">/*&#32;allocator&#32;func&#32;*/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;line;
<anchor xml:id="_memtrace_8cpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;par_txt;
<anchor xml:id="_memtrace_8cpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;file;
<anchor xml:id="_memtrace_8cpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;}&#32;call_t;
<anchor xml:id="_memtrace_8cpp_source_1l00108"/>00108 
<anchor xml:id="_memtrace_8cpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;call_t&#32;pack(<emphasis role="keywordtype">int</emphasis>&#32;f,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;par_txt,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;file)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;call_t&#32;ret;
<anchor xml:id="_memtrace_8cpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret.f&#32;=&#32;f;
<anchor xml:id="_memtrace_8cpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret.line&#32;=&#32;line;
<anchor xml:id="_memtrace_8cpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StrCpy(&amp;ret.par_txt,&#32;par_txt);
<anchor xml:id="_memtrace_8cpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StrCpy(&amp;ret.file,&#32;file);
<anchor xml:id="_memtrace_8cpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_memtrace_8cpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00117"/>00117 
<anchor xml:id="_memtrace_8cpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;print_call(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;msg,&#32;call_t&#32;call)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(msg)&#32;fprintf(fperror,&#32;<emphasis role="stringliteral">&quot;%s&quot;</emphasis>,&#32;msg);
<anchor xml:id="_memtrace_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(fperror,&#32;<emphasis role="stringliteral">&quot;%s&quot;</emphasis>,&#32;pretty[call.f]);
<anchor xml:id="_memtrace_8cpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(fperror,&#32;<emphasis role="stringliteral">&quot;%s&quot;</emphasis>,&#32;call.par_txt&#32;?&#32;call.par_txt&#32;:&#32;<emphasis role="stringliteral">&quot;?&quot;</emphasis>);
<anchor xml:id="_memtrace_8cpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(call.f&#32;&lt;=&#32;3)&#32;fprintf(fperror,&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>);
<anchor xml:id="_memtrace_8cpp_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(fperror,<emphasis role="stringliteral">&quot;&#32;@&#32;%s:&quot;</emphasis>,&#32;call.file&#32;?&#32;basename(call.file)&#32;:&#32;<emphasis role="stringliteral">&quot;?&quot;</emphasis>);
<anchor xml:id="_memtrace_8cpp_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(fperror,<emphasis role="stringliteral">&quot;%d\n&quot;</emphasis>,call.line&#32;?&#32;call.line&#32;:&#32;0);
<anchor xml:id="_memtrace_8cpp_source_1l00125"/>00125 &#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00126"/>00126 
<anchor xml:id="_memtrace_8cpp_source_1l00127"/>00127 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;memoriateruletet&#32;dump&#32;*/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00128"/>00128 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;dump_memory(<emphasis role="keywordtype">void</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*mem,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;can_len,&#32;FILE*&#32;fp)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*m=(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*)&#32;mem;
<anchor xml:id="_memtrace_8cpp_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;s,&#32;o;
<anchor xml:id="_memtrace_8cpp_source_1l00131"/>00131 
<anchor xml:id="_memtrace_8cpp_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(can_len&#32;&gt;&#32;0)
<anchor xml:id="_memtrace_8cpp_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(fp,&#32;<emphasis role="stringliteral">&quot;Dump&#32;(addr:&#32;%p&#32;kanari&#32;hossz:&#32;%d):\n&quot;</emphasis>,&#32;m+can_len,&#32;(<emphasis role="keywordtype">int</emphasis>)can_len);
<anchor xml:id="_memtrace_8cpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(fp,&#32;<emphasis role="stringliteral">&quot;Dump:&#32;(addr:&#32;%p)&#32;\n&quot;</emphasis>,&#32;m);
<anchor xml:id="_memtrace_8cpp_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;+=&#32;2*can_len;
<anchor xml:id="_memtrace_8cpp_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(s&#32;=&#32;0;&#32;s&#32;&lt;&#32;(size+15)/16;&#32;s++)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(fp,&#32;<emphasis role="stringliteral">&quot;%04x:%c&#32;&quot;</emphasis>,&#32;s*16,&#32;s*16&#32;&lt;&#32;can_len&#32;||&#32;s*16&#32;&gt;=&#32;size-can_len&#32;?&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;:&#32;<emphasis role="charliteral">&apos;*&apos;</emphasis>);
<anchor xml:id="_memtrace_8cpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(o&#32;=&#32;0;&#32;o&#32;&lt;&#32;16;&#32;o++)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(o&#32;==&#32;8)&#32;fprintf(fp,&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>);
<anchor xml:id="_memtrace_8cpp_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s*16+o&#32;&lt;&#32;size)
<anchor xml:id="_memtrace_8cpp_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(fp,&#32;<emphasis role="stringliteral">&quot;%02x&#32;&quot;</emphasis>,&#32;m[s*16+o]);
<anchor xml:id="_memtrace_8cpp_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(fp,&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&quot;</emphasis>);
<anchor xml:id="_memtrace_8cpp_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(fp,&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>);
<anchor xml:id="_memtrace_8cpp_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(o&#32;=&#32;0;&#32;o&#32;&lt;&#32;16;&#32;o++)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s*16+o&#32;&lt;&#32;size)
<anchor xml:id="_memtrace_8cpp_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(fp,&#32;<emphasis role="stringliteral">&quot;%c&quot;</emphasis>,&#32;isprint(m[s*16+o])&#32;?&#32;m[s*16+o]&#32;:&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>);
<anchor xml:id="_memtrace_8cpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(fp,&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>);
<anchor xml:id="_memtrace_8cpp_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(fp,&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
<anchor xml:id="_memtrace_8cpp_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00155"/>00155 &#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00156"/>00156 
<anchor xml:id="_memtrace_8cpp_source_1l00157"/>00157 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;mem_dump(<emphasis role="keywordtype">void</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*mem,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size,&#32;FILE*&#32;fp)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dump_memory(mem,&#32;size,&#32;0,&#32;fp);
<anchor xml:id="_memtrace_8cpp_source_1l00159"/>00159 &#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00160"/>00160 
<anchor xml:id="_memtrace_8cpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;BOOL&#32;dying;
<anchor xml:id="_memtrace_8cpp_source_1l00162"/>00162 
<anchor xml:id="_memtrace_8cpp_source_1l00163"/>00163 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;die(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;msg,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*&#32;p,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size,&#32;call_t&#32;*&#32;a,&#32;call_t&#32;*&#32;d)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00164"/>00164 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#ifdef&#32;MEMTRACE_ERRFILE</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fperror&#32;=&#32;fopen(XSTR(MEMTRACE_ERRFILE),&#32;<emphasis role="stringliteral">&quot;w&quot;</emphasis>);
<anchor xml:id="_memtrace_8cpp_source_1l00166"/>00166 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(fperror,<emphasis role="stringliteral">&quot;%s\n&quot;</emphasis>,msg);
<anchor xml:id="_memtrace_8cpp_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(fperror,&#32;<emphasis role="stringliteral">&quot;\tPointer:\t%p&quot;</emphasis>,&#32;PU(p));
<anchor xml:id="_memtrace_8cpp_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size)&#32;fprintf(fperror,<emphasis role="stringliteral">&quot;&#32;(%d&#32;byte)&quot;</emphasis>,&#32;(<emphasis role="keywordtype">int</emphasis>)size);
<anchor xml:id="_memtrace_8cpp_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(fperror,<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
<anchor xml:id="_memtrace_8cpp_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(a)&#32;print_call(<emphasis role="stringliteral">&quot;\tFoglalas:\t&quot;</emphasis>,&#32;*a);
<anchor xml:id="_memtrace_8cpp_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(d)&#32;print_call(<emphasis role="stringliteral">&quot;\tFelszabaditas:\t&quot;</emphasis>,&#32;*d);
<anchor xml:id="_memtrace_8cpp_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p)&#32;dump_memory(p,&#32;size,&#32;CANARY_LEN,&#32;fperror);
<anchor xml:id="_memtrace_8cpp_source_1l00176"/>00176 
<anchor xml:id="_memtrace_8cpp_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dying&#32;=&#32;TRUE;
<anchor xml:id="_memtrace_8cpp_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exit(120);
<anchor xml:id="_memtrace_8cpp_source_1l00179"/>00179 &#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00180"/>00180 
<anchor xml:id="_memtrace_8cpp_source_1l00181"/>00181 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;initialize();
<anchor xml:id="_memtrace_8cpp_source_1l00182"/>00182 END_NAMESPACE
<anchor xml:id="_memtrace_8cpp_source_1l00183"/>00183 
<anchor xml:id="_memtrace_8cpp_source_1l00184"/>00184 <emphasis role="comment">/*******************************************************************/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00185"/>00185 <emphasis role="comment">/*&#32;MEMTRACE_TO_MEMORY&#32;*/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00186"/>00186 <emphasis role="comment">/*******************************************************************/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00187"/>00187 
<anchor xml:id="_memtrace_8cpp_source_1l00188"/>00188 <emphasis role="preprocessor">#ifdef&#32;MEMTRACE_TO_MEMORY</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00189"/>00189 START_NAMESPACE
<anchor xml:id="_memtrace_8cpp_source_1l00190"/>00190 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>_registry_item&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*&#32;p;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;mem&#32;pointer*/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size;&#32;<emphasis role="comment">/*&#32;size*/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;call_t&#32;call;
<anchor xml:id="_memtrace_8cpp_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_registry_item&#32;*&#32;next;
<anchor xml:id="_memtrace_8cpp_source_1l00195"/>00195 &#32;&#32;&#32;&#32;}&#32;registry_item;
<anchor xml:id="_memtrace_8cpp_source_1l00196"/>00196 
<anchor xml:id="_memtrace_8cpp_source_1l00197"/>00197 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;registry_item&#32;registry;&#32;<emphasis role="comment">/*sentinel*/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00198"/>00198 
<anchor xml:id="_memtrace_8cpp_source_1l00199"/>00199 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;print_registry_item(registry_item&#32;*&#32;p)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_registry_item(p-&gt;next);
<anchor xml:id="_memtrace_8cpp_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(fperror,&#32;<emphasis role="stringliteral">&quot;\t%p%5d&#32;byte&#32;&quot;</emphasis>,p-&gt;p,&#32;(<emphasis role="keywordtype">int</emphasis>)p-&gt;size);
<anchor xml:id="_memtrace_8cpp_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_call(NULL,&#32;p-&gt;call);
<anchor xml:id="_memtrace_8cpp_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(p-&gt;call.par_txt)&#32;free(p-&gt;call.par_txt);
<anchor xml:id="_memtrace_8cpp_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(p-&gt;call.file)&#32;free(p-&gt;call.file);
<anchor xml:id="_memtrace_8cpp_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;free(p);
<anchor xml:id="_memtrace_8cpp_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00208"/>00208 &#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00209"/>00209 
<anchor xml:id="_memtrace_8cpp_source_1l00210"/>00210 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;ha&#32;nincs&#32;hiba,&#32;akkor&#32;0-val&#32;t√©r&#32;vissza&#32;*/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00211"/>00211 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;mem_check(<emphasis role="keywordtype">void</emphasis>)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;initialize();
<anchor xml:id="_memtrace_8cpp_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(dying)&#32;<emphasis role="keywordflow">return</emphasis>&#32;&#32;2;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;c√≠mz√©si&#32;hiba&#32;*/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00214"/>00214 
<anchor xml:id="_memtrace_8cpp_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(registry.next)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*szivarog*/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00217"/>00217 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#ifdef&#32;MEMTRACE_ERRFILE</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00218"/>00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fperror&#32;=&#32;fopen(XSTR(MEMTRACE_ERRFILE),&#32;<emphasis role="stringliteral">&quot;w&quot;</emphasis>);
<anchor xml:id="_memtrace_8cpp_source_1l00219"/>00219 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(fperror,&#32;<emphasis role="stringliteral">&quot;Szivargas:\n&quot;</emphasis>);
<anchor xml:id="_memtrace_8cpp_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_registry_item(registry.next);
<anchor xml:id="_memtrace_8cpp_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;registry.next&#32;=&#32;NULL;
<anchor xml:id="_memtrace_8cpp_source_1l00223"/>00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;mem√≥ria&#32;fogy√°s&#32;*/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_memtrace_8cpp_source_1l00226"/>00226 &#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00227"/>00227 END_NAMESPACE
<anchor xml:id="_memtrace_8cpp_source_1l00228"/>00228 <emphasis role="preprocessor">#endif</emphasis><emphasis role="comment">/*MEMTRACE_TO_MEMORY*/</emphasis><emphasis role="preprocessor"></emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00229"/>00229 
<anchor xml:id="_memtrace_8cpp_source_1l00230"/>00230 <emphasis role="comment">/*******************************************************************/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00231"/>00231 <emphasis role="comment">/*&#32;MEMTRACE_TO_FILE&#32;*/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00232"/>00232 <emphasis role="comment">/*******************************************************************/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00233"/>00233 
<anchor xml:id="_memtrace_8cpp_source_1l00234"/>00234 <emphasis role="preprocessor">#ifdef&#32;MEMTRACE_TO_FILE</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00235"/>00235 START_NAMESPACE
<anchor xml:id="_memtrace_8cpp_source_1l00236"/>00236 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;FILE&#32;*&#32;trace_file;
<anchor xml:id="_memtrace_8cpp_source_1l00237"/>00237 END_NAMESPACE
<anchor xml:id="_memtrace_8cpp_source_1l00238"/>00238 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00239"/>00239 
<anchor xml:id="_memtrace_8cpp_source_1l00240"/>00240 <emphasis role="comment">/*******************************************************************/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00241"/>00241 <emphasis role="comment">/*&#32;register/unregister&#32;*/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00242"/>00242 <emphasis role="comment">/*******************************************************************/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00243"/>00243 
<anchor xml:id="_memtrace_8cpp_source_1l00244"/>00244 START_NAMESPACE
<anchor xml:id="_memtrace_8cpp_source_1l00245"/>00245 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;allocated_blks;
<anchor xml:id="_memtrace_8cpp_source_1l00246"/>00246 
<anchor xml:id="_memtrace_8cpp_source_1l00247"/>00247 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;allocated_blocks()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;allocated_blks;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00248"/>00248 
<anchor xml:id="_memtrace_8cpp_source_1l00249"/>00249 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;BOOL&#32;register_memory(<emphasis role="keywordtype">void</emphasis>&#32;*&#32;p,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size,&#32;call_t&#32;call)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;initialize();
<anchor xml:id="_memtrace_8cpp_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocated_blks++;
<anchor xml:id="_memtrace_8cpp_source_1l00252"/>00252 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#ifdef&#32;MEMTRACE_TO_FILE</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00253"/>00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(trace_file,&#32;<emphasis role="stringliteral">&quot;%p\t%d\t%s%s&quot;</emphasis>,&#32;PU(p),&#32;(<emphasis role="keywordtype">int</emphasis>)size,&#32;pretty[call.f],&#32;call.par_txt&#32;?&#32;call.par_txt&#32;:&#32;<emphasis role="stringliteral">&quot;?&quot;</emphasis>);
<anchor xml:id="_memtrace_8cpp_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(call.f&#32;&lt;=&#32;3)&#32;fprintf(trace_file,&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>);
<anchor xml:id="_memtrace_8cpp_source_1l00255"/>00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(trace_file,&#32;<emphasis role="stringliteral">&quot;\t%d\t%s\n&quot;</emphasis>,&#32;call.line,&#32;call.file&#32;?&#32;call.file&#32;:&#32;<emphasis role="stringliteral">&quot;?&quot;</emphasis>);
<anchor xml:id="_memtrace_8cpp_source_1l00256"/>00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fflush(trace_file);
<anchor xml:id="_memtrace_8cpp_source_1l00257"/>00257 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00258"/>00258 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#ifdef&#32;MEMTRACE_TO_MEMORY</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00259"/>00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="comment">/*C-blokk*/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;registry_item&#32;*&#32;n&#32;=&#32;(registry_item*)malloc(<emphasis role="keyword">sizeof</emphasis>(registry_item));
<anchor xml:id="_memtrace_8cpp_source_1l00261"/>00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(n==NULL)&#32;<emphasis role="keywordflow">return</emphasis>&#32;FALSE;
<anchor xml:id="_memtrace_8cpp_source_1l00262"/>00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n-&gt;p&#32;=&#32;p;
<anchor xml:id="_memtrace_8cpp_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n-&gt;size&#32;=&#32;size;
<anchor xml:id="_memtrace_8cpp_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n-&gt;call&#32;=&#32;call;
<anchor xml:id="_memtrace_8cpp_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n-&gt;next&#32;=&#32;registry.next;
<anchor xml:id="_memtrace_8cpp_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;registry.next&#32;=&#32;n;
<anchor xml:id="_memtrace_8cpp_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}<emphasis role="comment">/*C-blokk*/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00268"/>00268 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00269"/>00269 
<anchor xml:id="_memtrace_8cpp_source_1l00270"/>00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TRUE;
<anchor xml:id="_memtrace_8cpp_source_1l00271"/>00271 &#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00272"/>00272 
<anchor xml:id="_memtrace_8cpp_source_1l00273"/>00273 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#ifdef&#32;MEMTRACE_TO_MEMORY</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00274"/>00274 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;registry_item&#32;*find_registry_item(<emphasis role="keywordtype">void</emphasis>&#32;*&#32;p)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00275"/>00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;registry_item&#32;*n&#32;=&#32;&amp;registry;
<anchor xml:id="_memtrace_8cpp_source_1l00276"/>00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(;&#32;n-&gt;next&#32;&amp;&amp;&#32;n-&gt;next-&gt;p&#32;!=&#32;p&#32;;&#32;n=n-&gt;next);
<anchor xml:id="_memtrace_8cpp_source_1l00277"/>00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;n;
<anchor xml:id="_memtrace_8cpp_source_1l00278"/>00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00279"/>00279 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00280"/>00280 
<anchor xml:id="_memtrace_8cpp_source_1l00281"/>00281 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;unregister_memory(<emphasis role="keywordtype">void</emphasis>&#32;*&#32;p,&#32;call_t&#32;call)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;initialize();
<anchor xml:id="_memtrace_8cpp_source_1l00283"/>00283 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#ifdef&#32;MEMTRACE_TO_FILE</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(trace_file,&#32;<emphasis role="stringliteral">&quot;%p\t%d\t%s%s&quot;</emphasis>,&#32;PU(p),&#32;-1,&#32;pretty[call.f],&#32;call.par_txt&#32;?&#32;call.par_txt&#32;:&#32;<emphasis role="stringliteral">&quot;?&quot;</emphasis>);
<anchor xml:id="_memtrace_8cpp_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(call.f&#32;&lt;=&#32;3)&#32;fprintf(trace_file,&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis>);
<anchor xml:id="_memtrace_8cpp_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(trace_file,<emphasis role="stringliteral">&quot;\t%d\t%s\n&quot;</emphasis>,call.line,&#32;call.file&#32;?&#32;call.file&#32;:&#32;<emphasis role="stringliteral">&quot;?&quot;</emphasis>);
<anchor xml:id="_memtrace_8cpp_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fflush(trace_file);
<anchor xml:id="_memtrace_8cpp_source_1l00288"/>00288 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00289"/>00289 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#ifdef&#32;MEMTRACE_TO_MEMORY</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00290"/>00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">/*C-blokk*/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00291"/>00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;registry_item&#32;*&#32;n&#32;=&#32;find_registry_item(p);
<anchor xml:id="_memtrace_8cpp_source_1l00292"/>00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(n-&gt;next)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocated_blks--;
<anchor xml:id="_memtrace_8cpp_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;registry_item&#32;*&#32;r&#32;=&#32;n-&gt;next;
<anchor xml:id="_memtrace_8cpp_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n-&gt;next&#32;=&#32;r-&gt;next;
<anchor xml:id="_memtrace_8cpp_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(COMP(r-&gt;call.f,call.f))&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;chk&#32;=&#32;chk_canary(r-&gt;p,&#32;r-&gt;size);
<anchor xml:id="_memtrace_8cpp_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(chk&#32;&lt;&#32;0)
<anchor xml:id="_memtrace_8cpp_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;die(<emphasis role="stringliteral">&quot;Blokk&#32;elott&#32;serult&#32;a&#32;memoria:&quot;</emphasis>,&#32;r-&gt;p,r-&gt;size,&amp;r-&gt;call,&amp;call);
<anchor xml:id="_memtrace_8cpp_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(chk&#32;&gt;&#32;0)
<anchor xml:id="_memtrace_8cpp_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;die(<emphasis role="stringliteral">&quot;Blokk&#32;utan&#32;serult&#32;a&#32;memoria&quot;</emphasis>,&#32;r-&gt;p,r-&gt;size,&amp;r-&gt;call,&amp;call);
<anchor xml:id="_memtrace_8cpp_source_1l00302"/>00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*rendben&#32;van&#32;minden*/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(call.par_txt)&#32;free(call.par_txt);
<anchor xml:id="_memtrace_8cpp_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(r-&gt;call.par_txt)&#32;free(r-&gt;call.par_txt);
<anchor xml:id="_memtrace_8cpp_source_1l00305"/>00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(call.file)&#32;free(call.file);
<anchor xml:id="_memtrace_8cpp_source_1l00306"/>00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(r-&gt;call.file)&#32;free(r-&gt;call.file);
<anchor xml:id="_memtrace_8cpp_source_1l00307"/>00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memset(PU(r-&gt;p),&#32;<emphasis role="charliteral">&apos;f&apos;</emphasis>,&#32;r-&gt;size);
<anchor xml:id="_memtrace_8cpp_source_1l00308"/>00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PU(r-&gt;p)[r-&gt;size-1]&#32;=&#32;0;
<anchor xml:id="_memtrace_8cpp_source_1l00309"/>00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;free(r);
<anchor xml:id="_memtrace_8cpp_source_1l00310"/>00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*hibas&#32;felszabaditas*/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00312"/>00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;die(<emphasis role="stringliteral">&quot;Hibas&#32;felszabaditas:&quot;</emphasis>,r-&gt;p,r-&gt;size,&amp;r-&gt;call,&amp;call);
<anchor xml:id="_memtrace_8cpp_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;die(<emphasis role="stringliteral">&quot;Nem&#32;letezo,&#32;vagy&#32;mar&#32;felszabaditott&#32;adat&#32;felszabaditasa:&quot;</emphasis>,&#32;p,&#32;0,NULL,&amp;call);
<anchor xml:id="_memtrace_8cpp_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00317"/>00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">/*C-blokk*/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00318"/>00318 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00319"/>00319 &#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00320"/>00320 END_NAMESPACE
<anchor xml:id="_memtrace_8cpp_source_1l00321"/>00321 
<anchor xml:id="_memtrace_8cpp_source_1l00322"/>00322 <emphasis role="comment">/*******************************************************************/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00323"/>00323 <emphasis role="comment">/*&#32;C-st√≠lus√∫&#32;mem√≥riakezel√©s&#32;*/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00324"/>00324 <emphasis role="comment">/*******************************************************************/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00325"/>00325 
<anchor xml:id="_memtrace_8cpp_source_1l00326"/>00326 <emphasis role="preprocessor">#ifdef&#32;MEMTRACE_C</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00327"/>00327 START_NAMESPACE
<anchor xml:id="_memtrace_8cpp_source_1l00328"/>00328 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*&#32;traced_malloc(<emphasis role="keywordtype">size_t</emphasis>&#32;size,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;par_txt,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;file)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00329"/>00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*&#32;p;
<anchor xml:id="_memtrace_8cpp_source_1l00330"/>00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;initialize();
<anchor xml:id="_memtrace_8cpp_source_1l00331"/>00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;canary_malloc(size,&#32;random_byte);
<anchor xml:id="_memtrace_8cpp_source_1l00332"/>00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00333"/>00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!register_memory(p,size,pack(FMALLOC,par_txt,line,file)))&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00334"/>00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;free(p);
<anchor xml:id="_memtrace_8cpp_source_1l00335"/>00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
<anchor xml:id="_memtrace_8cpp_source_1l00336"/>00336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00337"/>00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PU(p);
<anchor xml:id="_memtrace_8cpp_source_1l00338"/>00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00339"/>00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
<anchor xml:id="_memtrace_8cpp_source_1l00340"/>00340 &#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00341"/>00341 
<anchor xml:id="_memtrace_8cpp_source_1l00342"/>00342 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*&#32;traced_calloc(<emphasis role="keywordtype">size_t</emphasis>&#32;count,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;par_txt,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;file)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00343"/>00343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*&#32;p;
<anchor xml:id="_memtrace_8cpp_source_1l00344"/>00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;initialize();
<anchor xml:id="_memtrace_8cpp_source_1l00345"/>00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;*=&#32;count;
<anchor xml:id="_memtrace_8cpp_source_1l00346"/>00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;canary_malloc(size,&#32;0);
<anchor xml:id="_memtrace_8cpp_source_1l00347"/>00347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(p)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00348"/>00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!register_memory(p,size,pack(FCALLOC,par_txt,line,file)))&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00349"/>00349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;free(p);
<anchor xml:id="_memtrace_8cpp_source_1l00350"/>00350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
<anchor xml:id="_memtrace_8cpp_source_1l00351"/>00351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00352"/>00352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PU(p);
<anchor xml:id="_memtrace_8cpp_source_1l00353"/>00353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00354"/>00354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
<anchor xml:id="_memtrace_8cpp_source_1l00355"/>00355 &#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00356"/>00356 
<anchor xml:id="_memtrace_8cpp_source_1l00357"/>00357 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;traced_free(<emphasis role="keywordtype">void</emphasis>&#32;*&#32;pu,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;par_txt,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;file)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00358"/>00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;initialize();
<anchor xml:id="_memtrace_8cpp_source_1l00359"/>00359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(pu)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00360"/>00360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unregister_memory(P(pu),&#32;pack(FFREE,par_txt,line,file));
<anchor xml:id="_memtrace_8cpp_source_1l00361"/>00361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;free(P(pu));
<anchor xml:id="_memtrace_8cpp_source_1l00362"/>00362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00363"/>00363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*free(NULL)&#32;eset*/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00364"/>00364 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#ifdef&#32;MEMTRACE_TO_FILE</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00365"/>00365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(trace_file,<emphasis role="stringliteral">&quot;%s\t%d\t%10s\t&quot;</emphasis>,<emphasis role="stringliteral">&quot;NULL&quot;</emphasis>,-1,pretty[FFREE]);
<anchor xml:id="_memtrace_8cpp_source_1l00366"/>00366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(trace_file,<emphasis role="stringliteral">&quot;%d\t%s\n&quot;</emphasis>,line,file&#32;?&#32;file&#32;:&#32;<emphasis role="stringliteral">&quot;?&quot;</emphasis>);
<anchor xml:id="_memtrace_8cpp_source_1l00367"/>00367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fflush(trace_file);
<anchor xml:id="_memtrace_8cpp_source_1l00368"/>00368 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00369"/>00369 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#ifndef&#32;ALLOW_FREE_NULL</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00370"/>00370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="comment">/*C-blokk*/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00371"/>00371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;call_t&#32;call;
<anchor xml:id="_memtrace_8cpp_source_1l00372"/>00372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;call&#32;=&#32;pack(FFREE,par_txt,line,file);
<anchor xml:id="_memtrace_8cpp_source_1l00373"/>00373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;die(<emphasis role="stringliteral">&quot;free(NULL)&#32;hivasa:&quot;</emphasis>,NULL,0,NULL,&amp;call);
<anchor xml:id="_memtrace_8cpp_source_1l00374"/>00374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}<emphasis role="comment">/*C-blokk*/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00375"/>00375 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00376"/>00376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00377"/>00377 &#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00378"/>00378 
<anchor xml:id="_memtrace_8cpp_source_1l00379"/>00379 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*&#32;traced_realloc(<emphasis role="keywordtype">void</emphasis>&#32;*&#32;old,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;par_txt,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;file)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00380"/>00380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*&#32;p;
<anchor xml:id="_memtrace_8cpp_source_1l00381"/>00381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;oldsize&#32;=&#32;0;
<anchor xml:id="_memtrace_8cpp_source_1l00382"/>00382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;registry_item&#32;*&#32;n;
<anchor xml:id="_memtrace_8cpp_source_1l00383"/>00383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;initialize();
<anchor xml:id="_memtrace_8cpp_source_1l00384"/>00384 
<anchor xml:id="_memtrace_8cpp_source_1l00385"/>00385 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#ifdef&#32;MEMTRACE_TO_MEMORY</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00386"/>00386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n&#32;=&#32;find_registry_item(P(old));
<anchor xml:id="_memtrace_8cpp_source_1l00387"/>00387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n)&#32;oldsize&#32;=&#32;n-&gt;next-&gt;size;
<anchor xml:id="_memtrace_8cpp_source_1l00388"/>00388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;canary_malloc(size,&#32;random_byte);
<anchor xml:id="_memtrace_8cpp_source_1l00389"/>00389 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#else</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00390"/>00390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;=&#32;realloc(old,&#32;size);
<anchor xml:id="_memtrace_8cpp_source_1l00391"/>00391 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00392"/>00392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00393"/>00393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*Ha&#32;sikerult&#32;a&#32;foglalas,&#32;regisztraljuk*/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00394"/>00394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;register_memory(p,size,pack(FREALLOC,&#32;par_txt,&#32;line,file));
<anchor xml:id="_memtrace_8cpp_source_1l00395"/>00395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(old)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00396"/>00396 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#ifdef&#32;MEMTRACE_TO_MEMORY</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00397"/>00397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cpsize&#32;=&#32;2*CANARY_LEN;
<anchor xml:id="_memtrace_8cpp_source_1l00398"/>00398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(oldsize&#32;&lt;&#32;size)&#32;cpsize&#32;+=&#32;oldsize;
<anchor xml:id="_memtrace_8cpp_source_1l00399"/>00399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;cpsize&#32;+=&#32;size;
<anchor xml:id="_memtrace_8cpp_source_1l00400"/>00400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(p,&#32;P(old),&#32;cpsize);
<anchor xml:id="_memtrace_8cpp_source_1l00401"/>00401 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00402"/>00402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unregister_memory(P(old),&#32;pack(FREALLOC,&#32;par_txt,&#32;line,&#32;file));
<anchor xml:id="_memtrace_8cpp_source_1l00403"/>00403 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#ifdef&#32;MEMTRACE_TO_MEMORY</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00404"/>00404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;free&#32;P(old);
<anchor xml:id="_memtrace_8cpp_source_1l00405"/>00405 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00406"/>00406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00407"/>00407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PU(p);
<anchor xml:id="_memtrace_8cpp_source_1l00408"/>00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00409"/>00409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
<anchor xml:id="_memtrace_8cpp_source_1l00410"/>00410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00411"/>00411 &#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00412"/>00412 
<anchor xml:id="_memtrace_8cpp_source_1l00413"/>00413 END_NAMESPACE
<anchor xml:id="_memtrace_8cpp_source_1l00414"/>00414 <emphasis role="preprocessor">#endif</emphasis><emphasis role="comment">/*MEMTRACE_C*/</emphasis><emphasis role="preprocessor"></emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00415"/>00415 
<anchor xml:id="_memtrace_8cpp_source_1l00416"/>00416 <emphasis role="comment">/*******************************************************************/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00417"/>00417 <emphasis role="comment">/*&#32;C++-st√≠lus√∫&#32;mem√≥riakezel√©s&#32;*/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00418"/>00418 <emphasis role="comment">/*******************************************************************/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00419"/>00419 
<anchor xml:id="_memtrace_8cpp_source_1l00420"/>00420 <emphasis role="preprocessor">#ifdef&#32;MEMTRACE_CPP</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00421"/>00421 START_NAMESPACE
<anchor xml:id="_memtrace_8cpp_source_1l00422"/>00422 &#32;&#32;&#32;&#32;std::new_handler&#32;_new_handler;
<anchor xml:id="_memtrace_8cpp_source_1l00423"/>00423 
<anchor xml:id="_memtrace_8cpp_source_1l00424"/>00424 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_set_new_handler(std::new_handler&#32;h)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00425"/>00425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;initialize();
<anchor xml:id="_memtrace_8cpp_source_1l00426"/>00426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_new_handler&#32;=&#32;h;
<anchor xml:id="_memtrace_8cpp_source_1l00427"/>00427 &#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00428"/>00428 
<anchor xml:id="_memtrace_8cpp_source_1l00429"/>00429 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;call_t&#32;delete_call;
<anchor xml:id="_memtrace_8cpp_source_1l00430"/>00430 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;BOOL&#32;delete_called;
<anchor xml:id="_memtrace_8cpp_source_1l00431"/>00431 
<anchor xml:id="_memtrace_8cpp_source_1l00432"/>00432 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;set_delete_call(<emphasis role="keywordtype">int</emphasis>&#32;line,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;file)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00433"/>00433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;initialize();
<anchor xml:id="_memtrace_8cpp_source_1l00434"/>00434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;delete_call=pack(0,<emphasis role="stringliteral">&quot;&quot;</emphasis>,line,file);&#32;<emphasis role="comment">/*func&#32;√©rt√©ke&#32;l√©nyegtelen,&#32;majd&#32;fel√ºl√≠rjuk*/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00435"/>00435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;delete_called&#32;=&#32;TRUE;
<anchor xml:id="_memtrace_8cpp_source_1l00436"/>00436 &#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00437"/>00437 
<anchor xml:id="_memtrace_8cpp_source_1l00438"/>00438 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*&#32;traced_new(<emphasis role="keywordtype">size_t</emphasis>&#32;size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;func)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00439"/>00439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;initialize();
<anchor xml:id="_memtrace_8cpp_source_1l00440"/>00440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00441"/>00441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*&#32;p&#32;=&#32;canary_malloc(size,&#32;random_byte);
<anchor xml:id="_memtrace_8cpp_source_1l00442"/>00442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(p)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00443"/>00443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;register_memory(p,size,pack(func,<emphasis role="stringliteral">&quot;&quot;</emphasis>,line,file));
<anchor xml:id="_memtrace_8cpp_source_1l00444"/>00444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;PU(p);
<anchor xml:id="_memtrace_8cpp_source_1l00445"/>00445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00446"/>00446 
<anchor xml:id="_memtrace_8cpp_source_1l00447"/>00447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_new_handler&#32;==&#32;0)
<anchor xml:id="_memtrace_8cpp_source_1l00448"/>00448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::bad_alloc();
<anchor xml:id="_memtrace_8cpp_source_1l00449"/>00449 
<anchor xml:id="_memtrace_8cpp_source_1l00450"/>00450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_new_handler();
<anchor xml:id="_memtrace_8cpp_source_1l00451"/>00451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00452"/>00452 &#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00453"/>00453 
<anchor xml:id="_memtrace_8cpp_source_1l00454"/>00454 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;traced_delete(<emphasis role="keywordtype">void</emphasis>&#32;*&#32;pu,&#32;<emphasis role="keywordtype">int</emphasis>&#32;func)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00455"/>00455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;initialize();
<anchor xml:id="_memtrace_8cpp_source_1l00456"/>00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(pu)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00457"/>00457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*kiolvasom&#32;call-t,&#32;ha&#32;van*/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00458"/>00458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memtrace::call_t&#32;call&#32;=&#32;delete_called&#32;?&#32;(delete_call.f=func,&#32;delete_call)&#32;:&#32;pack(func,NULL,0,NULL);
<anchor xml:id="_memtrace_8cpp_source_1l00459"/>00459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memtrace::unregister_memory(P(pu),call);
<anchor xml:id="_memtrace_8cpp_source_1l00460"/>00460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;free(P(pu));
<anchor xml:id="_memtrace_8cpp_source_1l00461"/>00461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00462"/>00462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;delete_called=FALSE;
<anchor xml:id="_memtrace_8cpp_source_1l00463"/>00463 &#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00464"/>00464 END_NAMESPACE
<anchor xml:id="_memtrace_8cpp_source_1l00465"/>00465 
<anchor xml:id="_memtrace_8cpp_source_1l00466"/>00466 <emphasis role="keywordtype">void</emphasis>&#32;*&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">new</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;file)&#32;THROW_BADALLOC&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00467"/>00467 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;memtrace::traced_new(size,line,file,FNEW);
<anchor xml:id="_memtrace_8cpp_source_1l00468"/>00468 }
<anchor xml:id="_memtrace_8cpp_source_1l00469"/>00469 
<anchor xml:id="_memtrace_8cpp_source_1l00470"/>00470 <emphasis role="keywordtype">void</emphasis>&#32;*&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">new</emphasis>[](<emphasis role="keywordtype">size_t</emphasis>&#32;size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;file)&#32;THROW_BADALLOC&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00471"/>00471 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;memtrace::traced_new(size,line,file,FNEWARR);
<anchor xml:id="_memtrace_8cpp_source_1l00472"/>00472 }
<anchor xml:id="_memtrace_8cpp_source_1l00473"/>00473 
<anchor xml:id="_memtrace_8cpp_source_1l00474"/>00474 <emphasis role="keywordtype">void</emphasis>&#32;*&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">new</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;size)&#32;THROW_BADALLOC&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00475"/>00475 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;memtrace::traced_new(size,0,NULL,FNEW);
<anchor xml:id="_memtrace_8cpp_source_1l00476"/>00476 }
<anchor xml:id="_memtrace_8cpp_source_1l00477"/>00477 
<anchor xml:id="_memtrace_8cpp_source_1l00478"/>00478 <emphasis role="keywordtype">void</emphasis>&#32;*&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">new</emphasis>[](<emphasis role="keywordtype">size_t</emphasis>&#32;size)&#32;THROW_BADALLOC&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00479"/>00479 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;memtrace::traced_new(size,0,NULL,FNEWARR);
<anchor xml:id="_memtrace_8cpp_source_1l00480"/>00480 }
<anchor xml:id="_memtrace_8cpp_source_1l00481"/>00481 
<anchor xml:id="_memtrace_8cpp_source_1l00482"/>00482 <emphasis role="keywordtype">void</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">delete</emphasis>(<emphasis role="keywordtype">void</emphasis>&#32;*&#32;p)&#32;THROW_NOTHING&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00483"/>00483 &#32;&#32;&#32;&#32;memtrace::traced_delete(p,FDELETE);
<anchor xml:id="_memtrace_8cpp_source_1l00484"/>00484 }
<anchor xml:id="_memtrace_8cpp_source_1l00485"/>00485 
<anchor xml:id="_memtrace_8cpp_source_1l00486"/>00486 <emphasis role="keywordtype">void</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">delete</emphasis>[](<emphasis role="keywordtype">void</emphasis>&#32;*&#32;p)&#32;THROW_NOTHING&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00487"/>00487 &#32;&#32;&#32;&#32;memtrace::traced_delete(p,FDELETEARR);
<anchor xml:id="_memtrace_8cpp_source_1l00488"/>00488 }
<anchor xml:id="_memtrace_8cpp_source_1l00489"/>00489 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201402L</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00490"/>00490 <emphasis role="keywordtype">void</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">delete</emphasis>(<emphasis role="keywordtype">void</emphasis>&#32;*&#32;p,&#32;size_t)&#32;THROW_NOTHING&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00491"/>00491 &#32;&#32;&#32;&#32;memtrace::traced_delete(p,FDELETE);
<anchor xml:id="_memtrace_8cpp_source_1l00492"/>00492 }
<anchor xml:id="_memtrace_8cpp_source_1l00493"/>00493 
<anchor xml:id="_memtrace_8cpp_source_1l00494"/>00494 <emphasis role="keywordtype">void</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">delete</emphasis>[](<emphasis role="keywordtype">void</emphasis>&#32;*&#32;p,&#32;size_t)&#32;THROW_NOTHING&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00495"/>00495 &#32;&#32;&#32;&#32;memtrace::traced_delete(p,FDELETEARR);
<anchor xml:id="_memtrace_8cpp_source_1l00496"/>00496 }
<anchor xml:id="_memtrace_8cpp_source_1l00497"/>00497 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00498"/>00498 
<anchor xml:id="_memtrace_8cpp_source_1l00499"/>00499 <emphasis role="comment">/*&#32;Visual&#32;C++&#32;2012&#32;miatt&#32;kell,&#32;mert&#32;h√°klis,&#32;hogy&#32;nincs&#32;megfelel≈ë&#32;delete,&#32;b√°r&#32;senki&#32;sem&#32;haszn√°lja&#32;*/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00500"/>00500 <emphasis role="keywordtype">void</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">delete</emphasis>(<emphasis role="keywordtype">void</emphasis>&#32;*&#32;p,&#32;int,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*)&#32;THROW_NOTHING&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00501"/>00501 &#32;&#32;&#32;&#32;memtrace::traced_delete(p,FDELETE);
<anchor xml:id="_memtrace_8cpp_source_1l00502"/>00502 }
<anchor xml:id="_memtrace_8cpp_source_1l00503"/>00503 
<anchor xml:id="_memtrace_8cpp_source_1l00504"/>00504 <emphasis role="keywordtype">void</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">delete</emphasis>[](<emphasis role="keywordtype">void</emphasis>&#32;*&#32;p,&#32;int,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*)&#32;THROW_NOTHING&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00505"/>00505 &#32;&#32;&#32;&#32;memtrace::traced_delete(p,FDELETE);
<anchor xml:id="_memtrace_8cpp_source_1l00506"/>00506 }
<anchor xml:id="_memtrace_8cpp_source_1l00507"/>00507 
<anchor xml:id="_memtrace_8cpp_source_1l00508"/>00508 <emphasis role="preprocessor">#endif</emphasis><emphasis role="comment">/*MEMTRACE_CPP*/</emphasis><emphasis role="preprocessor"></emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00509"/>00509 
<anchor xml:id="_memtrace_8cpp_source_1l00510"/>00510 <emphasis role="comment">/*******************************************************************/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00511"/>00511 <emphasis role="comment">/*&#32;initialize&#32;*/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00512"/>00512 <emphasis role="comment">/*******************************************************************/</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00513"/>00513 
<anchor xml:id="_memtrace_8cpp_source_1l00514"/>00514 START_NAMESPACE
<anchor xml:id="_memtrace_8cpp_source_1l00515"/>00515 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;initialize()&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00516"/>00516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;BOOL&#32;first&#32;=&#32;TRUE;
<anchor xml:id="_memtrace_8cpp_source_1l00517"/>00517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(first)&#32;{
<anchor xml:id="_memtrace_8cpp_source_1l00518"/>00518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fperror&#32;=&#32;stderr;
<anchor xml:id="_memtrace_8cpp_source_1l00519"/>00519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_byte&#32;=&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;char)time(NULL);
<anchor xml:id="_memtrace_8cpp_source_1l00520"/>00520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first&#32;=&#32;FALSE;
<anchor xml:id="_memtrace_8cpp_source_1l00521"/>00521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dying&#32;=&#32;FALSE;
<anchor xml:id="_memtrace_8cpp_source_1l00522"/>00522 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#ifdef&#32;MEMTRACE_TO_MEMORY</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00523"/>00523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;registry.next&#32;=&#32;NULL;
<anchor xml:id="_memtrace_8cpp_source_1l00524"/>00524 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;!defined(USE_ATEXIT_OBJECT)&#32;&amp;&amp;&#32;defined(MEMTRACE_AUTO)</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00525"/>00525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;atexit((<emphasis role="keywordtype">void</emphasis>(*)(<emphasis role="keywordtype">void</emphasis>))mem_check);
<anchor xml:id="_memtrace_8cpp_source_1l00526"/>00526 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00527"/>00527 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00528"/>00528 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#ifdef&#32;MEMTRACE_TO_FILE</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00529"/>00529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;trace_file&#32;=&#32;fopen(<emphasis role="stringliteral">&quot;memtrace.dump&quot;</emphasis>,<emphasis role="stringliteral">&quot;w&quot;</emphasis>);
<anchor xml:id="_memtrace_8cpp_source_1l00530"/>00530 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00531"/>00531 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#ifdef&#32;MEMTRACE_CPP</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00532"/>00532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_new_handler&#32;=&#32;NULL;
<anchor xml:id="_memtrace_8cpp_source_1l00533"/>00533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;delete_called&#32;=&#32;FALSE;
<anchor xml:id="_memtrace_8cpp_source_1l00534"/>00534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;delete_call&#32;=&#32;pack(0,NULL,0,NULL);
<anchor xml:id="_memtrace_8cpp_source_1l00535"/>00535 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00536"/>00536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00537"/>00537 &#32;&#32;&#32;&#32;}
<anchor xml:id="_memtrace_8cpp_source_1l00538"/>00538 
<anchor xml:id="_memtrace_8cpp_source_1l00539"/>00539 <emphasis role="preprocessor">#if&#32;defined(MEMTRACE_TO_MEMORY)&#32;&amp;&amp;&#32;defined(USE_ATEXIT_OBJECT)</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00540"/>00540 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;atexit_class::counter&#32;=&#32;0;
<anchor xml:id="_memtrace_8cpp_source_1l00541"/>00541 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;atexit_class::err&#32;=&#32;0;
<anchor xml:id="_memtrace_8cpp_source_1l00542"/>00542 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_memtrace_8cpp_source_1l00543"/>00543 END_NAMESPACE
<anchor xml:id="_memtrace_8cpp_source_1l00544"/>00544 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
